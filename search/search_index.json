{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"ISCC - Software Development Kit # iscc-sdk is a Python development kit for creating and managing ISCC ( International Standard Content Code ) What is an ISCC # The ISCC is a similarity preserving identifier for digital media assets. ISCCs are generated algorithmically from digital content, just like cryptographic hashes. However, instead of using a single cryptographic hash function to identify data only, the ISCC uses various algorithms to create a composite identifier that exhibits similarity-preserving properties (soft hash). The component-based structure of the ISCC identifies content at multiple levels of abstraction. Each component is self-describing, modular, and can be used separately or with others to aid in various content identification tasks. The algorithmic design supports content deduplication, database synchronization, indexing, integrity verification, timestamping, versioning, data provenance, similarity clustering, anomaly detection, usage tracking, allocation of royalties, fact-checking and general digital asset management use-cases. What is iscc-sdk # iscc-sdk is built on top of iscc-core and adds high level features for generating and handling ISCC codes for all the different mediatypes: mediatype detection metadata extraction and embedding mediatype specific content extraction and pre-processing iscc indexing and search Requirements # Python 3.8 to 3.10 On Linux and MacOS taglib needs to be installed as a prerequisite. On Ubuntu, Mint and other Debian-Based distributions do: sudo apt install libtag1-dev On a Mac, use HomeBrew: brew install taglib Installation # Use the Python package manager pip to install iscc-sdk . pip install iscc-sdk Documentation # https://sdk.iscc.codes Project Status # The ISCC has been accepted by ISO as full work item ISO/AWI 24138 - International Standard Content Code and is currently being standardized at TC 46/SC 9/WG 18. https://www.iso.org/standard/77899.html Attention The iscc-sdk library and the accompanying documentation is under development. API changes and other backward incompatible changes are to be expected until the upcoming v1.5 stable release. Maintainers # @titusz Contributing # Pull requests are welcome. For significant changes, please open an issue first to discuss your plans. Please make sure to update tests as appropriate. You may also want join our developer chat on Telegram at https://t.me/iscc_dev .","title":"Overview"},{"location":"#iscc-software-development-kit","text":"iscc-sdk is a Python development kit for creating and managing ISCC ( International Standard Content Code )","title":"ISCC - Software Development Kit"},{"location":"#what-is-an-iscc","text":"The ISCC is a similarity preserving identifier for digital media assets. ISCCs are generated algorithmically from digital content, just like cryptographic hashes. However, instead of using a single cryptographic hash function to identify data only, the ISCC uses various algorithms to create a composite identifier that exhibits similarity-preserving properties (soft hash). The component-based structure of the ISCC identifies content at multiple levels of abstraction. Each component is self-describing, modular, and can be used separately or with others to aid in various content identification tasks. The algorithmic design supports content deduplication, database synchronization, indexing, integrity verification, timestamping, versioning, data provenance, similarity clustering, anomaly detection, usage tracking, allocation of royalties, fact-checking and general digital asset management use-cases.","title":"What is an ISCC"},{"location":"#what-is-iscc-sdk","text":"iscc-sdk is built on top of iscc-core and adds high level features for generating and handling ISCC codes for all the different mediatypes: mediatype detection metadata extraction and embedding mediatype specific content extraction and pre-processing iscc indexing and search","title":"What is iscc-sdk"},{"location":"#requirements","text":"Python 3.8 to 3.10 On Linux and MacOS taglib needs to be installed as a prerequisite. On Ubuntu, Mint and other Debian-Based distributions do: sudo apt install libtag1-dev On a Mac, use HomeBrew: brew install taglib","title":"Requirements"},{"location":"#installation","text":"Use the Python package manager pip to install iscc-sdk . pip install iscc-sdk","title":"Installation"},{"location":"#documentation","text":"https://sdk.iscc.codes","title":"Documentation"},{"location":"#project-status","text":"The ISCC has been accepted by ISO as full work item ISO/AWI 24138 - International Standard Content Code and is currently being standardized at TC 46/SC 9/WG 18. https://www.iso.org/standard/77899.html Attention The iscc-sdk library and the accompanying documentation is under development. API changes and other backward incompatible changes are to be expected until the upcoming v1.5 stable release.","title":"Project Status"},{"location":"#maintainers","text":"@titusz","title":"Maintainers"},{"location":"#contributing","text":"Pull requests are welcome. For significant changes, please open an issue first to discuss your plans. Please make sure to update tests as appropriate. You may also want join our developer chat on Telegram at https://t.me/iscc_dev .","title":"Contributing"},{"location":"audio/","text":"ISCC - Audio Processing # Audio handling module . audio_thumbnail ( fp ) # Create a thumbnail from embedded cover art. Parameters: Name Type Description Default fp str Filepath to audio file. required Returns: Type Description Image.Image|None Thumbnail image as PIL Image object audio_meta_extract ( fp ) # Extract metadata from audio file. Parameters: Name Type Description Default fp str Filepath to audio file. required Returns: Type Description dict Metadata mapped to IsccMeta schema audio_meta_embed ( fp , meta ) # Embed metadata into a copy of the audio file. Parameters: Name Type Description Default fp str Filepath to source audio file required meta IsccMeta Metadata to embed into audio file required Returns: Type Description str Filepath to new video file with updated metadata audio_features_extract ( fp ) # Exctracts chromprint fingerprint. Parameters: Name Type Description Default fp str Filepath required Returns: Type Description dict A dict with duration in seconds and fingerprint 32-bit integers","title":"Audio"},{"location":"audio/#iscc-audio-processing","text":"Audio handling module .","title":"ISCC - Audio Processing"},{"location":"audio/#iscc_sdk.audio.audio_thumbnail","text":"Create a thumbnail from embedded cover art. Parameters: Name Type Description Default fp str Filepath to audio file. required Returns: Type Description Image.Image|None Thumbnail image as PIL Image object","title":"audio_thumbnail()"},{"location":"audio/#iscc_sdk.audio.audio_meta_extract","text":"Extract metadata from audio file. Parameters: Name Type Description Default fp str Filepath to audio file. required Returns: Type Description dict Metadata mapped to IsccMeta schema","title":"audio_meta_extract()"},{"location":"audio/#iscc_sdk.audio.audio_meta_embed","text":"Embed metadata into a copy of the audio file. Parameters: Name Type Description Default fp str Filepath to source audio file required meta IsccMeta Metadata to embed into audio file required Returns: Type Description str Filepath to new video file with updated metadata","title":"audio_meta_embed()"},{"location":"audio/#iscc_sdk.audio.audio_features_extract","text":"Exctracts chromprint fingerprint. Parameters: Name Type Description Default fp str Filepath required Returns: Type Description dict A dict with duration in seconds and fingerprint 32-bit integers","title":"audio_features_extract()"},{"location":"changelog/","text":"Changelog # 0.5.1 - 2022-12-09 # Fix audio title embedding 0.5.0 - 2022-12-09 # Add audio cover art thumbnailing Integrate EPUB metadata embedding 0.4.9 - 2022-12-09 # Add EPUB cover image thumbnail extraction Add EPUB metadata embedding Retain existing PDF DocInfo metadata when embedding 0.4.8 - 2022-12-09 # Separeta ISCC_CORE and ISCC_SDK options Document ISCC_SDK option Integrate PDF thumbnail extraction 0.4.7 - 2022-12-08 # Add metadata embedding support for PDFs Add thumbnail support for PDFs Improve text metadata extraction mapping Improve documentation Update dependencies 0.4.6 - 2022-11-24 # Add support for earlier Pillow versions Add option to configure image_max_pixels Don\u00b4t embed empty titles in images Handle extracted metadata gracefully Fixed CVE-2007-4559 Update to iscc-schema v0.4.0 Update to iscc-core v0.2.12 Update to tika 2.6.0 Update dependencies 0.4.5 - 2022-07-04 # Update to iscc-schema v0.3.9 Update to iscc-core v0.2.11 Fix issue with embedded identifiers Add support for granular text features 0.4.4 - 2022-06-08 # Update to iscc-schema v0.3.8 Updated dependencies 0.4.3 - 2022-05-08 # Moved changelog to seperate file Fixed pillow resampling deprecation warning Fixed exiv2 error on older linux versions Added support for lazy installation of cli-tools Added cleanup of cli-tool archives after installation Removed obsolete ffprobe tool Updated dependencies 0.4.2 - 2022-04-27 # Fix metadata extraction failure with long texts Embed Dublin Core metadata in images Support path object inputs for text_name_from_uri 0.4.1 - 2022-03-26 # Added video thumbnail support Added support for IPFS wrap-with-directory 0.4.0 - 2022-03-21 # Added Text-Code generation Added Video-Code generation Added text document metadata extraction Added video metadata embedding and extraction Added custom exeptions Changed embedding to create a new mediafile Set filename on IsccMeta Set @type on IsccMeta 0.3.0 - 2022-03-12 # Added support for Audio-Code with metadata embedding/extraction 0.2.0 - 2022-03-10 # Added IPFS support 0.1.0 - 22022-03-09 # Initial release with support for ISCC Content-Code Image","title":"Changelog"},{"location":"changelog/#changelog","text":"","title":"Changelog"},{"location":"changelog/#051-2022-12-09","text":"Fix audio title embedding","title":"0.5.1 - 2022-12-09"},{"location":"changelog/#050-2022-12-09","text":"Add audio cover art thumbnailing Integrate EPUB metadata embedding","title":"0.5.0 - 2022-12-09"},{"location":"changelog/#049-2022-12-09","text":"Add EPUB cover image thumbnail extraction Add EPUB metadata embedding Retain existing PDF DocInfo metadata when embedding","title":"0.4.9 - 2022-12-09"},{"location":"changelog/#048-2022-12-09","text":"Separeta ISCC_CORE and ISCC_SDK options Document ISCC_SDK option Integrate PDF thumbnail extraction","title":"0.4.8 - 2022-12-09"},{"location":"changelog/#047-2022-12-08","text":"Add metadata embedding support for PDFs Add thumbnail support for PDFs Improve text metadata extraction mapping Improve documentation Update dependencies","title":"0.4.7 - 2022-12-08"},{"location":"changelog/#046-2022-11-24","text":"Add support for earlier Pillow versions Add option to configure image_max_pixels Don\u00b4t embed empty titles in images Handle extracted metadata gracefully Fixed CVE-2007-4559 Update to iscc-schema v0.4.0 Update to iscc-core v0.2.12 Update to tika 2.6.0 Update dependencies","title":"0.4.6 - 2022-11-24"},{"location":"changelog/#045-2022-07-04","text":"Update to iscc-schema v0.3.9 Update to iscc-core v0.2.11 Fix issue with embedded identifiers Add support for granular text features","title":"0.4.5 - 2022-07-04"},{"location":"changelog/#044-2022-06-08","text":"Update to iscc-schema v0.3.8 Updated dependencies","title":"0.4.4 - 2022-06-08"},{"location":"changelog/#043-2022-05-08","text":"Moved changelog to seperate file Fixed pillow resampling deprecation warning Fixed exiv2 error on older linux versions Added support for lazy installation of cli-tools Added cleanup of cli-tool archives after installation Removed obsolete ffprobe tool Updated dependencies","title":"0.4.3 - 2022-05-08"},{"location":"changelog/#042-2022-04-27","text":"Fix metadata extraction failure with long texts Embed Dublin Core metadata in images Support path object inputs for text_name_from_uri","title":"0.4.2 - 2022-04-27"},{"location":"changelog/#041-2022-03-26","text":"Added video thumbnail support Added support for IPFS wrap-with-directory","title":"0.4.1 - 2022-03-26"},{"location":"changelog/#040-2022-03-21","text":"Added Text-Code generation Added Video-Code generation Added text document metadata extraction Added video metadata embedding and extraction Added custom exeptions Changed embedding to create a new mediafile Set filename on IsccMeta Set @type on IsccMeta","title":"0.4.0 - 2022-03-21"},{"location":"changelog/#030-2022-03-12","text":"Added support for Audio-Code with metadata embedding/extraction","title":"0.3.0 - 2022-03-12"},{"location":"changelog/#020-2022-03-10","text":"Added IPFS support","title":"0.2.0 - 2022-03-10"},{"location":"changelog/#010-22022-03-09","text":"Initial release with support for ISCC Content-Code Image","title":"0.1.0 - 22022-03-09"},{"location":"image/","text":"ISCC - Image Processing # Image handling module . image_normalize ( img ) # Normalize image for hash calculation. Parameters: Name Type Description Default img Image.Image Pillow Image Object required Returns: Type Description Sequence[int] Normalized and flattened image as 1024-pixel array (from 32x32 gray pixels) image_exif_transpose ( img ) # Transpose image according to EXIF Orientation tag Parameters: Name Type Description Default img Image.Image Pillow Image Object required Returns: Type Description Image.Image EXIF transposed image image_fill_transparency ( img ) # Add white background to image if it has alpha transparency. Parameters: Name Type Description Default img Image.Image Pillow Image Object required Returns: Type Description Image.Image Image with transparency replaced by white background image_trim_border ( img ) # Trim uniform colored (empty) border. Takes the upper left pixel as reference for border color. Parameters: Name Type Description Default img Image.Image Pillow Image Object required Returns: Type Description Image.Image Image with uniform colored (empty) border removed. image_meta_extract ( fp ) # Extract metadata from image. Parameters: Name Type Description Default fp str Filepath to image file. required Returns: Type Description dict Metadata mapped to IsccMeta schema image_meta_embed ( fp , meta ) # Embed metadata into a copy of the image file. Parameters: Name Type Description Default fp str Filepath to source image file required meta IsccMeta Metadata to embed into image required Returns: Type Description str Filepath to the new image file with updated metadata image_meta_delete ( fp ) # Delete all metadata from image. Parameters: Name Type Description Default fp str Filepath to image file. required image_thumbnail ( fp ) # Create a thumbnail for an image. Parameters: Name Type Description Default fp str Filepath to image file. required Returns: Type Description Image.Image Thumbnail image as PIL Image object image_to_data_url ( img ) # Convert PIL Image object to WebP Data-URL. Parameters: Name Type Description Default img Image.Image PIL Image object to encode as WebP Data-URL. required Returns: Type Description str Data-URL string","title":"Image"},{"location":"image/#iscc-image-processing","text":"Image handling module .","title":"ISCC - Image Processing"},{"location":"image/#iscc_sdk.image.image_normalize","text":"Normalize image for hash calculation. Parameters: Name Type Description Default img Image.Image Pillow Image Object required Returns: Type Description Sequence[int] Normalized and flattened image as 1024-pixel array (from 32x32 gray pixels)","title":"image_normalize()"},{"location":"image/#iscc_sdk.image.image_exif_transpose","text":"Transpose image according to EXIF Orientation tag Parameters: Name Type Description Default img Image.Image Pillow Image Object required Returns: Type Description Image.Image EXIF transposed image","title":"image_exif_transpose()"},{"location":"image/#iscc_sdk.image.image_fill_transparency","text":"Add white background to image if it has alpha transparency. Parameters: Name Type Description Default img Image.Image Pillow Image Object required Returns: Type Description Image.Image Image with transparency replaced by white background","title":"image_fill_transparency()"},{"location":"image/#iscc_sdk.image.image_trim_border","text":"Trim uniform colored (empty) border. Takes the upper left pixel as reference for border color. Parameters: Name Type Description Default img Image.Image Pillow Image Object required Returns: Type Description Image.Image Image with uniform colored (empty) border removed.","title":"image_trim_border()"},{"location":"image/#iscc_sdk.image.image_meta_extract","text":"Extract metadata from image. Parameters: Name Type Description Default fp str Filepath to image file. required Returns: Type Description dict Metadata mapped to IsccMeta schema","title":"image_meta_extract()"},{"location":"image/#iscc_sdk.image.image_meta_embed","text":"Embed metadata into a copy of the image file. Parameters: Name Type Description Default fp str Filepath to source image file required meta IsccMeta Metadata to embed into image required Returns: Type Description str Filepath to the new image file with updated metadata","title":"image_meta_embed()"},{"location":"image/#iscc_sdk.image.image_meta_delete","text":"Delete all metadata from image. Parameters: Name Type Description Default fp str Filepath to image file. required","title":"image_meta_delete()"},{"location":"image/#iscc_sdk.image.image_thumbnail","text":"Create a thumbnail for an image. Parameters: Name Type Description Default fp str Filepath to image file. required Returns: Type Description Image.Image Thumbnail image as PIL Image object","title":"image_thumbnail()"},{"location":"image/#iscc_sdk.image.image_to_data_url","text":"Convert PIL Image object to WebP Data-URL. Parameters: Name Type Description Default img Image.Image PIL Image object to encode as WebP Data-URL. required Returns: Type Description str Data-URL string","title":"image_to_data_url()"},{"location":"main/","text":"ISCC - Main High-Level Functions # SDK main top-level functions . code_iscc ( fp ) # Generate ISCC-CODE. The ISCC-CODE is a composite of Meta, Content, Data and Instance Codes. Parameters: Name Type Description Default fp str Filepath used for ISCC-CODE creation. required Returns: Type Description IsccMeta ISCC metadata including ISCC-CODE and merged metadata from ISCC-UNITs. code_meta ( fp ) # Generate Meta-Code from digital asset. Parameters: Name Type Description Default fp str Filepath used for Meta-Code creation. required Returns: Type Description IsccMeta ISCC metadata including Meta-Code and extracted metadata fields. code_content ( fp ) # Detect mediatype and create corresponding Content-Code. Parameters: Name Type Description Default fp str Filepath required Returns: Type Description IsccMeta Content-Code wrapped in ISCC metadata. code_text ( fp ) # Generate Content-Code Text. Parameters: Name Type Description Default fp str Filepath used for Text-Code creation. required Returns: Type Description IsccMeta ISCC metadata including Text-Code. code_image ( fp ) # Generate Content-Code Image. Parameters: Name Type Description Default fp str Filepath used for Image-Code creation. required Returns: Type Description IsccMeta ISCC metadata including Image-Code. code_audio ( fp ) # Generate Content-Code Audio. Parameters: Name Type Description Default fp str Filepath used for Audio-Code creation. required Returns: Type Description IsccMeta ISCC metadata including Audio-Code. code_video ( fp ) # Generate Content-Code Video. Parameters: Name Type Description Default fp str Filepath used for Video-Code creation. required Returns: Type Description IsccMeta ISCC metadata including Image-Code. code_data ( fp ) # Create ISCC Data-Code. The Data-Code is a similarity preserving hash of the input data. Parameters: Name Type Description Default fp str Filepath used for Data-Code creation. required Returns: Type Description IsccMeta ISCC metadata including Data-Code. code_instance ( fp ) # Create ISCC Instance-Code. The Instance-Code is prefix of a cryptographic hash (blake3) of the input data. It\u00b4s purpose is to serve as a checksum that detects even minimal changes to the data of the referenced media asset. For cryptographicaly secure integrity checking a full 256-bit multihash is provided with the datahash field. Parameters: Name Type Description Default fp str Filepath used for Instance-Code creation. required Returns: Type Description IsccMeta ISCC metadata including Instance-Code, datahash and filesize.","title":"Main"},{"location":"main/#iscc-main-high-level-functions","text":"SDK main top-level functions .","title":"ISCC - Main High-Level Functions"},{"location":"main/#iscc_sdk.main.code_iscc","text":"Generate ISCC-CODE. The ISCC-CODE is a composite of Meta, Content, Data and Instance Codes. Parameters: Name Type Description Default fp str Filepath used for ISCC-CODE creation. required Returns: Type Description IsccMeta ISCC metadata including ISCC-CODE and merged metadata from ISCC-UNITs.","title":"code_iscc()"},{"location":"main/#iscc_sdk.main.code_meta","text":"Generate Meta-Code from digital asset. Parameters: Name Type Description Default fp str Filepath used for Meta-Code creation. required Returns: Type Description IsccMeta ISCC metadata including Meta-Code and extracted metadata fields.","title":"code_meta()"},{"location":"main/#iscc_sdk.main.code_content","text":"Detect mediatype and create corresponding Content-Code. Parameters: Name Type Description Default fp str Filepath required Returns: Type Description IsccMeta Content-Code wrapped in ISCC metadata.","title":"code_content()"},{"location":"main/#iscc_sdk.main.code_text","text":"Generate Content-Code Text. Parameters: Name Type Description Default fp str Filepath used for Text-Code creation. required Returns: Type Description IsccMeta ISCC metadata including Text-Code.","title":"code_text()"},{"location":"main/#iscc_sdk.main.code_image","text":"Generate Content-Code Image. Parameters: Name Type Description Default fp str Filepath used for Image-Code creation. required Returns: Type Description IsccMeta ISCC metadata including Image-Code.","title":"code_image()"},{"location":"main/#iscc_sdk.main.code_audio","text":"Generate Content-Code Audio. Parameters: Name Type Description Default fp str Filepath used for Audio-Code creation. required Returns: Type Description IsccMeta ISCC metadata including Audio-Code.","title":"code_audio()"},{"location":"main/#iscc_sdk.main.code_video","text":"Generate Content-Code Video. Parameters: Name Type Description Default fp str Filepath used for Video-Code creation. required Returns: Type Description IsccMeta ISCC metadata including Image-Code.","title":"code_video()"},{"location":"main/#iscc_sdk.main.code_data","text":"Create ISCC Data-Code. The Data-Code is a similarity preserving hash of the input data. Parameters: Name Type Description Default fp str Filepath used for Data-Code creation. required Returns: Type Description IsccMeta ISCC metadata including Data-Code.","title":"code_data()"},{"location":"main/#iscc_sdk.main.code_instance","text":"Create ISCC Instance-Code. The Instance-Code is prefix of a cryptographic hash (blake3) of the input data. It\u00b4s purpose is to serve as a checksum that detects even minimal changes to the data of the referenced media asset. For cryptographicaly secure integrity checking a full 256-bit multihash is provided with the datahash field. Parameters: Name Type Description Default fp str Filepath used for Instance-Code creation. required Returns: Type Description IsccMeta ISCC metadata including Instance-Code, datahash and filesize.","title":"code_instance()"},{"location":"mediatype/","text":"ISCC - Mediatype Detection # Detect and map RFC6838 mediatypes to ISCC processing modes . mediatype_and_mode ( fp ) # Detect mediatype and processing mode for a file. Example >>> import iscc_sdk >>> iscc_sdk.mediatype_and_mode('some.pdf') ('application/pdf', 'text') Parameters: Name Type Description Default fp str Filepath required Returns: Type Description tuple[str, str] A tuple of mediatype and mode mediatype_guess ( data , file_name = None ) # Guess mediatype from raw data or filename. First try to guess by file extension. If that fails we match by content sniffing. Example >>> import iscc_sdk >>> iscc_sdk.mediatype_guess(b'GIF89a') 'image/gif' Parameters: Name Type Description Default data bytes Raw file data (first 4096 bytes recommended) required file_name Optional[str] Filename for guessing based on file extension None Returns: Type Description str Media type sting mediatype_normalize ( mime ) # Normalize mediatype string. Example >>> import iscc_sdk >>> iscc_sdk.mediatype_normalize(\"audio/x-aiff\") '\"audio/aiff\"' Parameters: Name Type Description Default mime str Mediatype sting required Returns: Type Description str Normalized mediatype string mediatype_supported ( mime ) # Check if mediatype is supported. Parameters: Name Type Description Default mime str Mediatype sting required Returns: Type Description bool True if mediatype is supported mediatype_from_name ( name ) # Guess mediatype from filename or URL. Parameters: Name Type Description Default name str Filename or URL required Returns: Type Description str Mediatype string mediatype_from_data ( data ) # Guess mediatype by sniffing raw header data. Parameters: Name Type Description Default data bytes Raw fileheader data (first 4096 bytes recommended) required Returns: Type Description str Mediatype string mediatype_clean ( mime ) # Clean mediatype/content-type string or first entry of a list of mimetype strings. Also removes semicolon separated encoding information. Parameters: Name Type Description Default mime str|List Mediatype or list of mediatypes required Returns: Type Description str Mediatype string mediatype_to_mode ( mime_type ) # Get perceptual processing mode from mimetype. Parameters: Name Type Description Default mime_type str RFC-6838 mediatype string required Returns: Type Description Processing mode (\"text\", \"image\", \"audio\", \"video\") Raises: Type Description ValueError if no matching processing mode was found.","title":"Mediatype"},{"location":"mediatype/#iscc-mediatype-detection","text":"Detect and map RFC6838 mediatypes to ISCC processing modes .","title":"ISCC - Mediatype Detection"},{"location":"mediatype/#iscc_sdk.mediatype.mediatype_and_mode","text":"Detect mediatype and processing mode for a file. Example >>> import iscc_sdk >>> iscc_sdk.mediatype_and_mode('some.pdf') ('application/pdf', 'text') Parameters: Name Type Description Default fp str Filepath required Returns: Type Description tuple[str, str] A tuple of mediatype and mode","title":"mediatype_and_mode()"},{"location":"mediatype/#iscc_sdk.mediatype.mediatype_guess","text":"Guess mediatype from raw data or filename. First try to guess by file extension. If that fails we match by content sniffing. Example >>> import iscc_sdk >>> iscc_sdk.mediatype_guess(b'GIF89a') 'image/gif' Parameters: Name Type Description Default data bytes Raw file data (first 4096 bytes recommended) required file_name Optional[str] Filename for guessing based on file extension None Returns: Type Description str Media type sting","title":"mediatype_guess()"},{"location":"mediatype/#iscc_sdk.mediatype.mediatype_normalize","text":"Normalize mediatype string. Example >>> import iscc_sdk >>> iscc_sdk.mediatype_normalize(\"audio/x-aiff\") '\"audio/aiff\"' Parameters: Name Type Description Default mime str Mediatype sting required Returns: Type Description str Normalized mediatype string","title":"mediatype_normalize()"},{"location":"mediatype/#iscc_sdk.mediatype.mediatype_supported","text":"Check if mediatype is supported. Parameters: Name Type Description Default mime str Mediatype sting required Returns: Type Description bool True if mediatype is supported","title":"mediatype_supported()"},{"location":"mediatype/#iscc_sdk.mediatype.mediatype_from_name","text":"Guess mediatype from filename or URL. Parameters: Name Type Description Default name str Filename or URL required Returns: Type Description str Mediatype string","title":"mediatype_from_name()"},{"location":"mediatype/#iscc_sdk.mediatype.mediatype_from_data","text":"Guess mediatype by sniffing raw header data. Parameters: Name Type Description Default data bytes Raw fileheader data (first 4096 bytes recommended) required Returns: Type Description str Mediatype string","title":"mediatype_from_data()"},{"location":"mediatype/#iscc_sdk.mediatype.mediatype_clean","text":"Clean mediatype/content-type string or first entry of a list of mimetype strings. Also removes semicolon separated encoding information. Parameters: Name Type Description Default mime str|List Mediatype or list of mediatypes required Returns: Type Description str Mediatype string","title":"mediatype_clean()"},{"location":"mediatype/#iscc_sdk.mediatype.mediatype_to_mode","text":"Get perceptual processing mode from mimetype. Parameters: Name Type Description Default mime_type str RFC-6838 mediatype string required Returns: Type Description Processing mode (\"text\", \"image\", \"audio\", \"video\") Raises: Type Description ValueError if no matching processing mode was found.","title":"mediatype_to_mode()"},{"location":"metadata/","text":"ISCC - Metadata Handling # Metadata handling functions extract_metadata ( fp ) # Extract metadata from file. Parameters: Name Type Description Default fp str Filepath to media file. required Returns: Type Description IsccMeta Metadata mapped to IsccMeta schema embed_metadata ( fp , meta ) # Embed metadata into a copy of the media file and return path to updated file. Parameters: Name Type Description Default fp str Filepath to source media file required meta IsccMeta Metadata to embed into media file required Returns: Type Description str|None Filepath to the new media file with embedded metadata (None if no embedding supported) IsccMeta # Custom IsccMeta with text trimming support","title":"Metadata"},{"location":"metadata/#iscc-metadata-handling","text":"Metadata handling functions","title":"ISCC - Metadata Handling"},{"location":"metadata/#iscc_sdk.metadata.extract_metadata","text":"Extract metadata from file. Parameters: Name Type Description Default fp str Filepath to media file. required Returns: Type Description IsccMeta Metadata mapped to IsccMeta schema","title":"extract_metadata()"},{"location":"metadata/#iscc_sdk.metadata.embed_metadata","text":"Embed metadata into a copy of the media file and return path to updated file. Parameters: Name Type Description Default fp str Filepath to source media file required meta IsccMeta Metadata to embed into media file required Returns: Type Description str|None Filepath to the new media file with embedded metadata (None if no embedding supported)","title":"embed_metadata()"},{"location":"metadata/#iscc_sdk.metadata.IsccMeta","text":"Custom IsccMeta with text trimming support","title":"IsccMeta"},{"location":"options/","text":"ISCC - Configuration Options # SDK options can be configured using environment variables. Variables are defined as class-atributes on the SdkOptions instance. Example how to access configuration options import iscc_sdk as idk # To access ISCC_SDK_VIDEO_FPS setting use fps : int = idk . sdk_opts . video_fps # Configuration of the `iscc-core` dependency is also available # To access ISCC_CORE_IMAGE_BITS use image_bits : int = idk . core_opts . image_bits SdkOptions # SDK Configuration Options granular class-attribute # granular : bool = Field ( False , description = \"ISCC_SDK_GRANULAR - Generate additional granular fingerprints for ISCC-CODES\" , ) image_exif_transpose class-attribute # image_exif_transpose : bool = Field ( True , description = \"ISCC_SDK_IMAGE_EXIF_TRANSPOSE - Transpose image according to EXIF Orientation tag\" , ) image_fill_transparency class-attribute # image_fill_transparency : bool = Field ( True , description = \"ISCC_SDK_IMAGE_FILL_TRANSPARENCY - Add white background to image if it has alpha transparency\" , ) image_trim_border class-attribute # image_trim_border : bool = Field ( True , description = \"ISCC_SDK_IMAGE_TRIM_BORDER - Crop empty borders of images\" , ) image_thumbnail_size class-attribute # image_thumbnail_size : int = Field ( 128 , description = \"ISCC_SDK_IMAGE_THUMBNAIL_SIZE - Size of larger side of thumbnail in number of pixels\" , ) image_thumbnail_quality class-attribute # image_thumbnail_quality : int = Field ( 60 , description = \"ISCC_SDK_IMAGE_THUMBNAIL_QUALITY - Thumbnail image compression setting (0-100)\" , ) image_max_pixels class-attribute # image_max_pixels : Optional [ int ] = Field ( 128000000 , description = \"ISCC_SDK_IMAGE_MAX_PIXELS - Maximum number of pixels allowed for processing (default 128Mpx / 0.5GB RGB)\" , ) text_avg_chunk_size class-attribute # text_avg_chunk_size : int = Field ( 1024 , description = \"ISCC_SDK_TEXT_AVG_CHUNK_SIZE - Avg number of characters per text chunk for granular fingerprints\" , ) video_fps class-attribute # video_fps : int = Field ( 5 , description = \"ISCC_SDK_VIDEO_FPS - Frames per second to process for video hash (ignored when 0).\" , ) sdk_opts module-attribute # sdk_opts = SdkOptions () core_opts module-attribute # core_opts = iscc_core . core_opts","title":"Options"},{"location":"options/#iscc-configuration-options","text":"SDK options can be configured using environment variables. Variables are defined as class-atributes on the SdkOptions instance. Example how to access configuration options import iscc_sdk as idk # To access ISCC_SDK_VIDEO_FPS setting use fps : int = idk . sdk_opts . video_fps # Configuration of the `iscc-core` dependency is also available # To access ISCC_CORE_IMAGE_BITS use image_bits : int = idk . core_opts . image_bits","title":"ISCC - Configuration Options"},{"location":"options/#iscc_sdk.options.SdkOptions","text":"SDK Configuration Options","title":"SdkOptions"},{"location":"options/#iscc_sdk.options.SdkOptions.granular","text":"granular : bool = Field ( False , description = \"ISCC_SDK_GRANULAR - Generate additional granular fingerprints for ISCC-CODES\" , )","title":"granular"},{"location":"options/#iscc_sdk.options.SdkOptions.image_exif_transpose","text":"image_exif_transpose : bool = Field ( True , description = \"ISCC_SDK_IMAGE_EXIF_TRANSPOSE - Transpose image according to EXIF Orientation tag\" , )","title":"image_exif_transpose"},{"location":"options/#iscc_sdk.options.SdkOptions.image_fill_transparency","text":"image_fill_transparency : bool = Field ( True , description = \"ISCC_SDK_IMAGE_FILL_TRANSPARENCY - Add white background to image if it has alpha transparency\" , )","title":"image_fill_transparency"},{"location":"options/#iscc_sdk.options.SdkOptions.image_trim_border","text":"image_trim_border : bool = Field ( True , description = \"ISCC_SDK_IMAGE_TRIM_BORDER - Crop empty borders of images\" , )","title":"image_trim_border"},{"location":"options/#iscc_sdk.options.SdkOptions.image_thumbnail_size","text":"image_thumbnail_size : int = Field ( 128 , description = \"ISCC_SDK_IMAGE_THUMBNAIL_SIZE - Size of larger side of thumbnail in number of pixels\" , )","title":"image_thumbnail_size"},{"location":"options/#iscc_sdk.options.SdkOptions.image_thumbnail_quality","text":"image_thumbnail_quality : int = Field ( 60 , description = \"ISCC_SDK_IMAGE_THUMBNAIL_QUALITY - Thumbnail image compression setting (0-100)\" , )","title":"image_thumbnail_quality"},{"location":"options/#iscc_sdk.options.SdkOptions.image_max_pixels","text":"image_max_pixels : Optional [ int ] = Field ( 128000000 , description = \"ISCC_SDK_IMAGE_MAX_PIXELS - Maximum number of pixels allowed for processing (default 128Mpx / 0.5GB RGB)\" , )","title":"image_max_pixels"},{"location":"options/#iscc_sdk.options.SdkOptions.text_avg_chunk_size","text":"text_avg_chunk_size : int = Field ( 1024 , description = \"ISCC_SDK_TEXT_AVG_CHUNK_SIZE - Avg number of characters per text chunk for granular fingerprints\" , )","title":"text_avg_chunk_size"},{"location":"options/#iscc_sdk.options.SdkOptions.video_fps","text":"video_fps : int = Field ( 5 , description = \"ISCC_SDK_VIDEO_FPS - Frames per second to process for video hash (ignored when 0).\" , )","title":"video_fps"},{"location":"options/#iscc_sdk.options.sdk_opts","text":"sdk_opts = SdkOptions ()","title":"sdk_opts"},{"location":"options/#iscc_sdk.options.core_opts","text":"core_opts = iscc_core . core_opts","title":"core_opts"},{"location":"text/","text":"ISCC - Text Processing # Text handling functions . text_meta_extract ( fp ) # Extract metadata from text document file. Parameters: Name Type Description Default fp str Filepath to text document file. required Returns: Type Description dict Metadata mapped to IsccMeta schema text_meta_embed ( fp , meta ) # Embed metadata into a copy of the text document. Parameters: Name Type Description Default fp str Filepath to source text document file required meta IsccMeta Metadata to embed into text document required Returns: Type Description str|None Filepath to the new file with updated metadata (None if no embedding supported) text_extract ( fp ) # Extract plaintext from a text document. Parameters: Name Type Description Default fp st Filepath to text document file. required Returns: Type Description str Extracted plaintext text_features ( text ) # Create granular fingerprint for text (minhashes over ngrams from cdc-chunks). Text should be normalized before extracting text features. Parameters: Name Type Description Default text str Normalized plaintext. required Returns: Type Description Dictionary with 'sizes' and 'features'. text_chunks ( text , avg_size = idk . sdk_opts . text_avg_chunk_size ) # Generates variable sized text chunks (without leading BOM) Parameters: Name Type Description Default text normalized plaintext required avg_size Targeted average size of text chunks in bytes. idk.sdk_opts.text_avg_chunk_size text_name_from_uri ( uri ) # Extract filename part of an uri without file extension to be used as fallback title for an asset if no title information can be acquired. Parameters: Name Type Description Default uri str Url or file path required Returns: Type Description str derived name (might be an empty string) text_thumbnail ( fp ) # Create a thumbnail for a text document. Parameters: Name Type Description Default fp str Filepath to text document. required Returns: Type Description Image.Image|None Thumbnail image as PIL Image object","title":"Text"},{"location":"text/#iscc-text-processing","text":"Text handling functions .","title":"ISCC - Text Processing"},{"location":"text/#iscc_sdk.text.text_meta_extract","text":"Extract metadata from text document file. Parameters: Name Type Description Default fp str Filepath to text document file. required Returns: Type Description dict Metadata mapped to IsccMeta schema","title":"text_meta_extract()"},{"location":"text/#iscc_sdk.text.text_meta_embed","text":"Embed metadata into a copy of the text document. Parameters: Name Type Description Default fp str Filepath to source text document file required meta IsccMeta Metadata to embed into text document required Returns: Type Description str|None Filepath to the new file with updated metadata (None if no embedding supported)","title":"text_meta_embed()"},{"location":"text/#iscc_sdk.text.text_extract","text":"Extract plaintext from a text document. Parameters: Name Type Description Default fp st Filepath to text document file. required Returns: Type Description str Extracted plaintext","title":"text_extract()"},{"location":"text/#iscc_sdk.text.text_features","text":"Create granular fingerprint for text (minhashes over ngrams from cdc-chunks). Text should be normalized before extracting text features. Parameters: Name Type Description Default text str Normalized plaintext. required Returns: Type Description Dictionary with 'sizes' and 'features'.","title":"text_features()"},{"location":"text/#iscc_sdk.text.text_chunks","text":"Generates variable sized text chunks (without leading BOM) Parameters: Name Type Description Default text normalized plaintext required avg_size Targeted average size of text chunks in bytes. idk.sdk_opts.text_avg_chunk_size","title":"text_chunks()"},{"location":"text/#iscc_sdk.text.text_name_from_uri","text":"Extract filename part of an uri without file extension to be used as fallback title for an asset if no title information can be acquired. Parameters: Name Type Description Default uri str Url or file path required Returns: Type Description str derived name (might be an empty string)","title":"text_name_from_uri()"},{"location":"text/#iscc_sdk.text.text_thumbnail","text":"Create a thumbnail for a text document. Parameters: Name Type Description Default fp str Filepath to text document. required Returns: Type Description Image.Image|None Thumbnail image as PIL Image object","title":"text_thumbnail()"},{"location":"video/","text":"ISCC - Video Processing # Video handling module video_meta_extract ( fp ) # Extract metadata from video. Parameters: Name Type Description Default fp str Filepath to video file required Returns: Type Description dict Metdata mpped to IsccMeta schema video_meta_embed ( fp , meta ) # Embed metadata into a copy of the video file. Supported fields: name, description, meta, creator, license, aquire Parameters: Name Type Description Default fp str Filepath to source video file required meta IsccMeta Metadata to embed into video required Returns: Type Description str Filepath to new video file with updated metadata video_thumbnail ( fp ) # Create a thumbnail for a video. Parameters: Name Type Description Default fp str Filepath to video file. required Returns: Type Description bytes Raw PNG byte data video_features_extract ( fp ) # Extract video features. Parameters: Name Type Description Default fp str Filepath to video file. required Returns: Type Description Sequence[Tuple[int, ...]] A sequence of frame signatures. video_mp7sig_extract ( fp ) # Extract MPEG-7 Video Signature. Parameters: Name Type Description Default fp str Filepath to video file. required Returns: Type Description bytes raw signature data","title":"Video"},{"location":"video/#iscc-video-processing","text":"Video handling module","title":"ISCC - Video Processing"},{"location":"video/#iscc_sdk.video.video_meta_extract","text":"Extract metadata from video. Parameters: Name Type Description Default fp str Filepath to video file required Returns: Type Description dict Metdata mpped to IsccMeta schema","title":"video_meta_extract()"},{"location":"video/#iscc_sdk.video.video_meta_embed","text":"Embed metadata into a copy of the video file. Supported fields: name, description, meta, creator, license, aquire Parameters: Name Type Description Default fp str Filepath to source video file required meta IsccMeta Metadata to embed into video required Returns: Type Description str Filepath to new video file with updated metadata","title":"video_meta_embed()"},{"location":"video/#iscc_sdk.video.video_thumbnail","text":"Create a thumbnail for a video. Parameters: Name Type Description Default fp str Filepath to video file. required Returns: Type Description bytes Raw PNG byte data","title":"video_thumbnail()"},{"location":"video/#iscc_sdk.video.video_features_extract","text":"Extract video features. Parameters: Name Type Description Default fp str Filepath to video file. required Returns: Type Description Sequence[Tuple[int, ...]] A sequence of frame signatures.","title":"video_features_extract()"},{"location":"video/#iscc_sdk.video.video_mp7sig_extract","text":"Extract MPEG-7 Video Signature. Parameters: Name Type Description Default fp str Filepath to video file. required Returns: Type Description bytes raw signature data","title":"video_mp7sig_extract()"},{"location":"other/epub/","text":"ISCC - EPUB Processing # EPUB handling module . epub_thumbnail ( fp ) # Creat thumbnail from EPUB document cover image. Parameters: Name Type Description Default fp str Filepath to EPUB document. required Returns: Type Description Image.Image Thumbnail image as PIL Image object epub_meta_embed ( fp , meta ) # Embed metadata into a copy of the EPUB file. Parameters: Name Type Description Default fp str Filepath to source EPUB file required meta IsccMeta Metadata to embed into EPUB required Returns: Type Description str Filepath to the new PDF file with updated metadata","title":"EPUB"},{"location":"other/epub/#iscc-epub-processing","text":"EPUB handling module .","title":"ISCC - EPUB Processing"},{"location":"other/epub/#iscc_sdk.epub.epub_thumbnail","text":"Creat thumbnail from EPUB document cover image. Parameters: Name Type Description Default fp str Filepath to EPUB document. required Returns: Type Description Image.Image Thumbnail image as PIL Image object","title":"epub_thumbnail()"},{"location":"other/epub/#iscc_sdk.epub.epub_meta_embed","text":"Embed metadata into a copy of the EPUB file. Parameters: Name Type Description Default fp str Filepath to source EPUB file required meta IsccMeta Metadata to embed into EPUB required Returns: Type Description str Filepath to the new PDF file with updated metadata","title":"epub_meta_embed()"},{"location":"other/ipfs/","text":"ISCC - IPFS Tools # IPFS wrapper ipfs_cidv1 ( fp , wrap = False ) # Create default IPFS CIDv1 for file at filepath fp . If wrap is True, the file will be wrapped with a directory and the filname will be appended to the directory CIDv1 with a / . Parameters: Name Type Description Default fp str Filepath required Returns: Type Description str IPFS CIDv1 of the file ipfs_cidv1_base16 ( fp ) # Create IPFS CIDv1 with base16 encoding. Parameters: Name Type Description Default fp str Filepath required Returns: Type Description str IPFS CIDv1 of the file in base16 (hex)","title":"IPFS"},{"location":"other/ipfs/#iscc-ipfs-tools","text":"IPFS wrapper","title":"ISCC - IPFS Tools"},{"location":"other/ipfs/#iscc_sdk.ipfs.ipfs_cidv1","text":"Create default IPFS CIDv1 for file at filepath fp . If wrap is True, the file will be wrapped with a directory and the filname will be appended to the directory CIDv1 with a / . Parameters: Name Type Description Default fp str Filepath required Returns: Type Description str IPFS CIDv1 of the file","title":"ipfs_cidv1()"},{"location":"other/ipfs/#iscc_sdk.ipfs.ipfs_cidv1_base16","text":"Create IPFS CIDv1 with base16 encoding. Parameters: Name Type Description Default fp str Filepath required Returns: Type Description str IPFS CIDv1 of the file in base16 (hex)","title":"ipfs_cidv1_base16()"},{"location":"other/pdf/","text":"ISCC - PDF Processing # PDF handling module . pdf_thumbnail ( fp ) # Create a thumbnail from PDF document. Parameters: Name Type Description Default fp str Filepath to PDF document. required Returns: Type Description Image.Image Thumbnail image as PIL Image object pdf_meta_embed ( fp , meta ) # Embed metadata into a copy of the PDF file. Parameters: Name Type Description Default fp str Filepath to source PDF file required meta IsccMeta Metadata to embed into PDF required Returns: Type Description str Filepath to the new PDF file with updated metadata","title":"PDF"},{"location":"other/pdf/#iscc-pdf-processing","text":"PDF handling module .","title":"ISCC - PDF Processing"},{"location":"other/pdf/#iscc_sdk.pdf.pdf_thumbnail","text":"Create a thumbnail from PDF document. Parameters: Name Type Description Default fp str Filepath to PDF document. required Returns: Type Description Image.Image Thumbnail image as PIL Image object","title":"pdf_thumbnail()"},{"location":"other/pdf/#iscc_sdk.pdf.pdf_meta_embed","text":"Embed metadata into a copy of the PDF file. Parameters: Name Type Description Default fp str Filepath to source PDF file required meta IsccMeta Metadata to embed into PDF required Returns: Type Description str Filepath to the new PDF file with updated metadata","title":"pdf_meta_embed()"},{"location":"other/tools/","text":"ISCC - Tools # Manage SDK binary media file handling tools . install () # Install binary tools for content extraction and metadata handling. run_ffmpeg ( args : List [ str ]) # Run ffmpeg command with args . Install ffmpeg if not found. run_fpcalc ( args : List [ str ]) # Run fpcalc command with args . Installs fpcalc if not found. run_exiv2 ( args : List [ str ]) # Run exiv2 command with args . Install exiv2 if not found. run_exiv2json ( args : List [ str ]) # Run exiv2json command with args . Install exiv2json if not found. run_ipfs ( args : List [ str ]) # Run ipfs command with args . Install ipfs if not found. run_tika ( args : List [ str ]) # Run tika command with args . Install tika if not found.","title":"Tools"},{"location":"other/tools/#iscc-tools","text":"Manage SDK binary media file handling tools .","title":"ISCC - Tools"},{"location":"other/tools/#iscc_sdk.tools.install","text":"Install binary tools for content extraction and metadata handling.","title":"install()"},{"location":"other/tools/#iscc_sdk.tools.run_ffmpeg","text":"Run ffmpeg command with args . Install ffmpeg if not found.","title":"run_ffmpeg()"},{"location":"other/tools/#iscc_sdk.tools.run_fpcalc","text":"Run fpcalc command with args . Installs fpcalc if not found.","title":"run_fpcalc()"},{"location":"other/tools/#iscc_sdk.tools.run_exiv2","text":"Run exiv2 command with args . Install exiv2 if not found.","title":"run_exiv2()"},{"location":"other/tools/#iscc_sdk.tools.run_exiv2json","text":"Run exiv2json command with args . Install exiv2json if not found.","title":"run_exiv2json()"},{"location":"other/tools/#iscc_sdk.tools.run_ipfs","text":"Run ipfs command with args . Install ipfs if not found.","title":"run_ipfs()"},{"location":"other/tools/#iscc_sdk.tools.run_tika","text":"Run tika command with args . Install tika if not found.","title":"run_tika()"}]}