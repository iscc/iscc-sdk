{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"ISCC Software Development Kit (iscc-sdk)","text":"<p>A comprehensive Python toolkit for creating and managing ISCC (International Standard Content Code) identifiers for digital media assets.</p>"},{"location":"#overview","title":"Overview","text":""},{"location":"#what-is-an-iscc","title":"What is an ISCC?","text":"<p>The International Standard Content Code (ISCC) is a content-dependent, similarity-preserving identifier and fingerprint system for digital content, standardized as ISO 24138:2024.</p> <p>ISCCs are neither manually nor automatically assigned but are derived from the digital content itself. Generated algorithmically using various hash algorithms, ISCCs create composite identifiers with similarity-preserving properties (soft hashes) that can be independently derived by unrelated parties from the same media asset.</p> <p>Digital content is dynamic - continuously re-encoded, resized, and re-compressed as it travels through complex networks. The ISCC remains robust across these transformations while preserving estimates of data, content, and metadata similarity.</p> <p>The component-based structure of ISCC identifies content at multiple levels of abstraction, creating a multi-layered fingerprint. These components work together to create a robust, similarity-preserving identifier that remains stable despite modifications to the underlying digital asset. With this multi-layered approach, the ISCC can track content throughout its lifecycle, even as it's re-encoded, resized, or re-compressed.</p> <p>Each component is self-describing, modular, and can be used separately or together, enabling ISCCs to support numerous digital asset management use-cases across all domains concerned with producing, processing, and distributing digital information (science, journalism, books, music, film, etc.):</p> <ul> <li>Content deduplication and discovery</li> <li>Database synchronization and indexing</li> <li>Integrity verification and timestamping</li> <li>Versioning and data provenance tracking</li> <li>Similarity clustering and matching</li> <li>Anomaly detection in content collections</li> <li>Usage tracking and royalty allocation</li> <li>Fact-checking and content verification</li> <li>Interoperability between different systems and actors</li> <li>Association with higher-level identifiers (work/product identifiers)</li> </ul>"},{"location":"#what-is-iscc-sdk","title":"What is iscc-sdk?","text":"<p><code>iscc-sdk</code> builds on top of <code>iscc-core</code> to provide high-level features for generating and handling ISCC codes across different media types. It serves as a complete toolkit for implementing ISCC-based workflows in Python applications.</p>"},{"location":"#features","title":"Features","text":"<ul> <li>Comprehensive Media Support: Process text, image, audio, and video files</li> <li>Mediatype Detection: Automatically identify file formats</li> <li>Metadata Management: Extract and embed metadata across different file formats</li> <li>Content Processing: Handle mediatype-specific content extraction and normalization</li> <li>Rich CLI: Command-line interface for easy integration into workflows</li> <li>Cross-Platform: Works on Windows, macOS, and Linux</li> <li>Built-in Tools: Includes necessary binaries for media processing</li> <li>Standards Compliant: Build on top of the ISO 24138:2024 reference implementation</li> </ul>"},{"location":"#requirements","title":"Requirements","text":"<ul> <li>Python 3.9 to 3.13 on 64-bit systems</li> <li>Supported platforms: Windows, macOS, Linux</li> </ul>"},{"location":"#installation","title":"Installation","text":""},{"location":"#using-pip","title":"Using pip","text":"<pre><code>pip install iscc-sdk\n</code></pre>"},{"location":"#using-poetry","title":"Using Poetry","text":"<pre><code>poetry add iscc-sdk\n</code></pre>"},{"location":"#usage","title":"Usage","text":""},{"location":"#python-api","title":"Python API","text":""},{"location":"#create-an-iscc-code-for-a-media-file","title":"Create an ISCC-CODE for a media file:","text":"<pre><code>import iscc_sdk as idk\n\n# Generate a complete ISCC code\niscc_meta = idk.code_iscc(\"/path/to/mediafile.jpg\")\nprint(iscc_meta.iscc)  # Full ISCC code\nprint(iscc_meta.json(indent=2))  # All metadata as JSON\n\n# Generate specific ISCC components\nmeta_code = idk.code_meta(\"/path/to/mediafile.jpg\")\ncontent_code = idk.code_content(\"/path/to/mediafile.jpg\")\ndata_code = idk.code_data(\"/path/to/mediafile.jpg\")\ninstance_code = idk.code_instance(\"/path/to/mediafile.jpg\")\n\n# Process specific media types\ntext_code = idk.code_text(\"/path/to/document.pdf\")\nimage_code = idk.code_image(\"/path/to/image.png\")\naudio_code = idk.code_audio(\"/path/to/audio.mp3\")\nvideo_code = idk.code_video(\"/path/to/video.mp4\")\n</code></pre>"},{"location":"#extract-and-embed-metadata","title":"Extract and embed metadata:","text":"<pre><code>import iscc_sdk as idk\nfrom iscc_schema import IsccMeta\n\n# Extract metadata\nmetadata = idk.extract_metadata(\"/path/to/mediafile.jpg\")\n\n# Create custom metadata\ncustom_meta = IsccMeta(\n    name=\"My Asset Title\",\n    description=\"Description of the asset\",\n    creator=\"Creator Name\",\n    license=\"https://creativecommons.org/licenses/by/4.0/\"\n)\n\n# Embed metadata into a copy of the file\nnew_file = idk.embed_metadata(\"/path/to/mediafile.jpg\", custom_meta)\n</code></pre>"},{"location":"#command-line-interface","title":"Command Line Interface","text":"<p>The SDK includes a command-line interface called <code>idk</code>.</p>"},{"location":"#create-an-iscc-code-for-a-single-file","title":"Create an ISCC code for a single file:","text":"<pre><code>idk create /path/to/mediafile.jpg\n</code></pre>"},{"location":"#process-multiple-files-in-a-directory","title":"Process multiple files in a directory:","text":"<pre><code>idk batch /folder_with_media_files\n</code></pre>"},{"location":"#install-required-binaries","title":"Install required binaries:","text":"<pre><code>idk install\n</code></pre>"},{"location":"#run-self-tests","title":"Run self-tests:","text":"<pre><code>idk selftest\n</code></pre>"},{"location":"#documentation","title":"Documentation","text":"<p>For complete documentation, visit https://sdk.iscc.codes</p>"},{"location":"#project-status","title":"Project Status","text":"<p>The ISCC is an official standard published as ISO 24138:2024 - International Standard Content Code within ISO/TC 46/SC 9/WG 18.</p> <p>Note: The <code>iscc-sdk</code> library and the accompanying documentation are under active development. API changes and other backward incompatible changes are to be expected until a v1.0 stable release.</p>"},{"location":"#contributing","title":"Contributing","text":"<p>Contributions are welcome! Here's how you can help:</p> <ol> <li>Issues: Report bugs or suggest features via the    issue tracker</li> <li>Pull Requests: Submit PRs for bug fixes or new features</li> <li>Discussion: For significant changes, please open an issue first to discuss your plans</li> <li>Testing: Please make sure to update tests as appropriate</li> </ol> <p>Join our developer chat on Telegram at https://t.me/iscc_dev.</p>"},{"location":"#license","title":"License","text":"<p>This project is licensed under the Apache 2.0 License - see the LICENSE file for details.</p>"},{"location":"ai/","title":"Ai","text":"<p>You are an expert software architect and senior developer. Your role is to provide clear, pragmatic, and detailed responses to user requests. You prioritize clarity over simplicity and are not afraid to address complex topics when necessary.</p> <p>Analyze the user's request carefully. If any part of it is unclear or ambiguous, you should ask for clarification before proceeding with your response. It's better to gather all necessary information upfront rather than making assumptions.</p> <p>When responding to the user:</p> <ol> <li>Provide a clear and concise answer that addresses all aspects of the request.</li> <li>Do not oversimplify your response. Embrace complexity when it's warranted, but always strive for    clarity.</li> <li>If the request involves code, provide pragmatic, easily testable, and performant solutions.</li> <li>Always consider and apply the following principles in your responses:</li> <li>YAGNI (You Aren't Gonna Need It)</li> <li>SOLID (Single Responsibility, Open-Closed, Liskov Substitution, Interface Segregation,      Dependency Inversion)</li> <li>KISS (Keep It Simple, Stupid)</li> <li>DRY (Don't Repeat Yourself)</li> </ol> <p>When writing code or discussing code structure:</p> <ol> <li>Prefer short and pure functions where possible.</li> <li>Keep the number of function arguments as low as possible.</li> <li>Avoid nested functions.</li> <li>Write concise and to-the-point docstrings for all functions and classes.</li> <li>Always use absolute imports.</li> </ol> <p>Remember to think through your response carefully and respond with confidence, drawing on your extensive knowledge and experience as an expert software architect and senior developer.</p>"},{"location":"audio/","title":"ISCC - Audio Processing","text":"<p>Audio handling module.</p>"},{"location":"audio/#iscc_sdk.audio.audio_thumbnail","title":"<code>audio_thumbnail(fp)</code>","text":"<p>Create a thumbnail from embedded cover art.</p> <p>Parameters:</p> Name Type Description Default <code>fp</code> <p>Filepath to audio file.</p> required <p>Returns:</p> Type Description <p>Thumbnail image as PIL Image object</p>"},{"location":"audio/#iscc_sdk.audio.audio_meta_extract","title":"<code>audio_meta_extract(fp)</code>","text":"<p>Extract metadata from audio file.</p> <p>Parameters:</p> Name Type Description Default <code>fp</code> <p>Filepath to audio file.</p> required <p>Returns:</p> Type Description <p>Metadata mapped to IsccMeta schema</p>"},{"location":"audio/#iscc_sdk.audio.audio_meta_embed","title":"<code>audio_meta_embed(fp, meta)</code>","text":"<p>Embed metadata into a copy of the audio file.</p> <p>Parameters:</p> Name Type Description Default <code>fp</code> <p>Filepath to source audio file</p> required <code>meta</code> <code>IsccMeta</code> <p>Metadata to embed into audio file</p> required <p>Returns:</p> Type Description <p>Filepath to new audio file with updated metadata</p>"},{"location":"audio/#iscc_sdk.audio.audio_features_extract","title":"<code>audio_features_extract(fp)</code>","text":"<p>Exctracts chromprint fingerprint.</p> <p>Parameters:</p> Name Type Description Default <code>fp</code> <p>Filepath</p> required <p>Returns:</p> Type Description <p>A dict with <code>duration</code> in seconds and <code>fingerprint</code> 32-bit integers</p>"},{"location":"changelog/","title":"Changelog","text":""},{"location":"changelog/#changelog","title":"Changelog","text":""},{"location":"changelog/#083-2025-05-12","title":"0.8.3 - 2025-05-12","text":"<ul> <li>Added <code>code_sum</code> function for efficient combined Data-Code and Instance-Code generation</li> <li>Updated <code>code_iscc</code> &amp; <code>code_meta</code> to accept custom metadata and optionally skip file metadata extraction</li> <li>Updated <code>code_iscc</code> to compute Data &amp; Instance Code in one go and process data sequentially</li> <li>Added separate <code>code_iscc_mt</code> for multihreaded processing</li> <li>Updated dependencies</li> </ul>"},{"location":"changelog/#082-2025-05-02","title":"0.8.2 - 2025-05-02","text":"<ul> <li>Added experimental semantic codes for text and image with optional iscc-sct and iscc-sci packages</li> <li>Added <code>byte_offsets</code> option to support UTF-8 byte positions in granular simprints</li> <li>Improved image transparency handling with more robust conversion logic</li> <li>Improved text sanitization</li> <li>Updated lock file dependencies</li> </ul>"},{"location":"changelog/#081-2025-04-09","title":"0.8.1 - 2025-04-09","text":"<ul> <li>Added <code>text_keep</code> option to store extracted text on <code>IsccMeta.text</code> property</li> <li>Changed PDF text extraction to use pypdfium2 with reading order reconstruction</li> <li>Re-added pillow-avif-plugin (Pillow dropped bundling libavif)</li> </ul>"},{"location":"changelog/#080-2025-04-02","title":"0.8.0 - 2025-04-02","text":"<ul> <li>Added support for optional ISCC-UNITS and configurable bit size (256-bit).</li> <li>Added <code>extract</code> command to CLI for text extraction with error handling.</li> <li>Added AVIF thumbnail format support and metadata stripping for thumbnails.</li> <li>Added robust EPUB cover image extraction with multiple fallback strategies.</li> <li>Added fixed layout EPUB detection with namespace support.</li> <li>Added container processing support for embedded elements in epub files.</li> <li>Added min_image_size option to filter images during EPUB processing.</li> <li>Added text sanitization and HTML cleaning for metadata extraction.</li> <li>Added image_strip_metadata function for thumbnail generation.</li> <li>Added AVIF thumbnail format support.</li> <li>Modified code_iscc to conditionally generate meta-code based on create_meta option.</li> <li>Updated text features generation to use 256-bit MinHash algorithm.</li> <li>Updated video feature extraction with improved hash bits and metadata structure.</li> <li>Simplified media processing functions by removing redundant optional parameters.</li> <li>Updated dependencies.</li> </ul>"},{"location":"changelog/#070-2025-03-23","title":"0.7.0 - 2025-03-23","text":"<ul> <li>Added Python 3.13 support</li> <li>Added support for scene based granular video code processing</li> <li>Added ffprobe video metadata extraction (duration, fps, width, height, language)</li> <li>Added support str and Path objects for all file inpunts</li> <li>Added <code>generator</code> (name and version of software) to ISCC metadata</li> <li>Added optional fallback to ISCC-SUM for unsupported media types</li> <li>Handle unsupported SVG files gracefully</li> <li>Replaced python-magic with puremagic wrapper for cross-platform compatibility</li> <li>Replaced exiv2 CLI tool with native python bindings</li> <li>Replaced Tika Java dependency with native extractous package</li> <li>Fix bug with thumbnail generation for image modes</li> </ul>"},{"location":"changelog/#062-2024-06-13","title":"0.6.2 - 2024-06-13","text":"<ul> <li>Update and relax dependencies</li> <li>Update ISO project status</li> </ul>"},{"location":"changelog/#061-2024-02-05","title":"0.6.1 - 2024-02-05","text":"<ul> <li>Improved robustness of granular text features</li> <li>Added <code>extract_meta</code> &amp; <code>create_thumb</code> parameters</li> <li>Fixed redundant metadata extraction</li> <li>Updated dependencies</li> </ul>"},{"location":"changelog/#060-2024-01-22","title":"0.6.0 - 2024-01-22","text":"<ul> <li>Add avif and heic image format support</li> <li>Update to Exiv2 0.27.7</li> <li>Update to Tika 2.9.1</li> <li>Update to FFMPEG 6.1</li> <li>Add Python 3.12 Support</li> <li>Add Pydantic v2 Support</li> <li>Dropped Python 3.8 Support</li> </ul>"},{"location":"changelog/#059-2023-06-21","title":"0.5.9 - 2023-06-21","text":"<ul> <li>Fix stdout decoding</li> </ul>"},{"location":"changelog/#058-2023-06-21","title":"0.5.8 - 2023-06-21","text":"<ul> <li>Add <code>install</code> cli command</li> <li>Ignore signature files in batch cli command</li> <li>Fix encoding of result files</li> <li>Updated dependencies</li> </ul>"},{"location":"changelog/#057-2023-06-21","title":"0.5.7 - 2023-06-21","text":"<ul> <li>Added parallel processing of ISCC-UNITs</li> <li>Handle video thumbnail extraction errors gracefully</li> <li>Add basic command line interface for batch processing</li> <li>Add option to keep MP7 Video Signature</li> <li>Support concurrent audio metadata extraction</li> <li>Updated dependencies</li> <li>Fixed mkdocstrings</li> </ul>"},{"location":"changelog/#056-2023-04-28","title":"0.5.6 - 2023-04-28","text":"<ul> <li>Don\u00b4t install tika more than once per session</li> <li>Don\u00b4t pin poetry build requirement version</li> <li>Publish wheels</li> <li>Use latest poetry with default settings in CI</li> <li>Update dependencies</li> </ul>"},{"location":"changelog/#055-2023-03-26","title":"0.5.5 - 2023-03-26","text":"<ul> <li>Switch to official pytaglib distribution</li> <li>Update dependencies</li> </ul>"},{"location":"changelog/#054-2023-03-15","title":"0.5.4 - 2023-03-15","text":"<ul> <li>Added global <code>extract_metadata</code> option</li> <li>Removed taglib installation from CI</li> </ul>"},{"location":"changelog/#053-2023-03-12","title":"0.5.3 - 2023-03-12","text":"<ul> <li>Update to iscc-core 1.0.3 using binary wheels</li> </ul>"},{"location":"changelog/#052-2023-03-11","title":"0.5.2 - 2023-03-11","text":"<ul> <li>Added Python 3.11 support</li> <li>Added WavPack support</li> <li>Added docx metadata embedding support</li> <li>Improved error messages for unsupported mediatypes</li> <li>Improved robustness of audio metadata extraction</li> <li>Normalize mediatype application/xml to text/xml</li> <li>Nomralize mediatype application/vnd.ms-asf video/x-ms-asf</li> <li>Normalize mediatype application/vnd.adobe.flash.movie to application/x-shockwave-flash</li> <li>Add docx and xlsx extensions to mediatypes</li> <li>Updated to iscc-core 1.0.1</li> <li>Updated various dependencies</li> </ul>"},{"location":"changelog/#051-2022-12-09","title":"0.5.1 - 2022-12-09","text":"<ul> <li>Fix audio title embedding</li> </ul>"},{"location":"changelog/#050-2022-12-09","title":"0.5.0 - 2022-12-09","text":"<ul> <li>Add audio cover art thumbnailing</li> <li>Integrate EPUB metadata embedding</li> </ul>"},{"location":"changelog/#049-2022-12-09","title":"0.4.9 - 2022-12-09","text":"<ul> <li>Add EPUB cover image thumbnail extraction</li> <li>Add EPUB metadata embedding</li> <li>Retain existing PDF DocInfo metadata when embedding</li> </ul>"},{"location":"changelog/#048-2022-12-09","title":"0.4.8 - 2022-12-09","text":"<ul> <li>Separeta ISCC_CORE and ISCC_SDK options</li> <li>Document ISCC_SDK option</li> <li>Integrate PDF thumbnail extraction</li> </ul>"},{"location":"changelog/#047-2022-12-08","title":"0.4.7 - 2022-12-08","text":"<ul> <li>Add metadata embedding support for PDFs</li> <li>Add thumbnail support for PDFs</li> <li>Improve text metadata extraction mapping</li> <li>Improve documentation</li> <li>Update dependencies</li> </ul>"},{"location":"changelog/#046-2022-11-24","title":"0.4.6 - 2022-11-24","text":"<ul> <li>Add support for earlier Pillow versions</li> <li>Add option to configure <code>image_max_pixels</code></li> <li>Don\u00b4t embed empty titles in images</li> <li>Handle extracted metadata gracefully</li> <li>Fixed CVE-2007-4559</li> <li>Update to iscc-schema v0.4.0</li> <li>Update to iscc-core v0.2.12</li> <li>Update to tika 2.6.0</li> <li>Update dependencies</li> </ul>"},{"location":"changelog/#045-2022-07-04","title":"0.4.5 - 2022-07-04","text":"<ul> <li>Update to iscc-schema v0.3.9</li> <li>Update to iscc-core v0.2.11</li> <li>Fix issue with embedded identifiers</li> <li>Add support for granular text features</li> </ul>"},{"location":"changelog/#044-2022-06-08","title":"0.4.4 - 2022-06-08","text":"<ul> <li>Update to iscc-schema v0.3.8</li> <li>Updated dependencies</li> </ul>"},{"location":"changelog/#043-2022-05-08","title":"0.4.3 - 2022-05-08","text":"<ul> <li>Moved changelog to seperate file</li> <li>Fixed pillow resampling deprecation warning</li> <li>Fixed exiv2 error on older linux versions</li> <li>Added support for lazy installation of cli-tools</li> <li>Added cleanup of cli-tool archives after installation</li> <li>Removed obsolete ffprobe tool</li> <li>Updated dependencies</li> </ul>"},{"location":"changelog/#042-2022-04-27","title":"0.4.2 - 2022-04-27","text":"<ul> <li>Fix metadata extraction failure with long texts</li> <li>Embed Dublin Core metadata in images</li> <li>Support path object inputs for text_name_from_uri</li> </ul>"},{"location":"changelog/#041-2022-03-26","title":"0.4.1 - 2022-03-26","text":"<ul> <li>Added video thumbnail support</li> <li>Added support for IPFS wrap-with-directory</li> </ul>"},{"location":"changelog/#040-2022-03-21","title":"0.4.0 - 2022-03-21","text":"<ul> <li>Added Text-Code generation</li> <li>Added Video-Code generation</li> <li>Added text document metadata extraction</li> <li>Added video metadata embedding and extraction</li> <li>Added custom exeptions</li> <li>Changed embedding to create a new mediafile</li> <li>Set filename on IsccMeta</li> <li>Set @type on IsccMeta</li> </ul>"},{"location":"changelog/#030-2022-03-12","title":"0.3.0 - 2022-03-12","text":"<ul> <li>Added support for Audio-Code with metadata embedding/extraction</li> </ul>"},{"location":"changelog/#020-2022-03-10","title":"0.2.0 - 2022-03-10","text":"<ul> <li>Added IPFS support</li> </ul>"},{"location":"changelog/#010-2022-03-09","title":"0.1.0 - 2022-03-09","text":"<ul> <li>Initial release with support for ISCC Content-Code Image</li> </ul>"},{"location":"conventions/","title":"Coding Convetions","text":""},{"location":"conventions/#general","title":"General","text":"<p>Motto:</p> <p>Complexity is not the problem, ambiguity is. Simplicity does not solve ambiguity, clarity does. You will respond with clarity but will not simplify your response or be ambiguous.</p> <ul> <li>Write pragmatic, easily testable, and performant code.</li> <li>Stick with YAGNI + SOLID + KISS + DRY principles.</li> <li>Prefer functional style code with short and pure functions when appropriate.</li> <li>Keep the number of function arguments as low as possible.</li> <li>Don\u00b4t create nested functions.</li> <li>Write concise and to-the-point docstrings for all functions.</li> <li>When in doubt, choose the most explicit approach that is easiest to reason about.</li> <li>When architecting a solution use First Principles Thinking.</li> </ul>"},{"location":"conventions/#python-code-style","title":"Python Code Style","text":"<ul> <li>Don\u00b4t use type annotations in python function signatures.</li> <li>Add PEP 484 style type comment as the first line after function definitions.</li> <li>Use built-in collection types as generic types for annotations (PEP 585).</li> <li>Use the | (pipe) operator for writing union types (PEP 604).</li> <li>Write code such that it can be tested without mocking or mokeypatching.</li> <li>We use pytest for testing.</li> <li>Avoid mocking and monkeypatching in tests at all costs.</li> <li>If testing is not possible without mocking/monkeypatching suggest a coderefactor.</li> <li>Don\u00b4t make python import within function instead make imports at the module level</li> </ul>"},{"location":"conventions/#python-example","title":"Python Example","text":"<p>Example function with PEP 484 style type comment and docstring:</p> <pre><code>def tokenize_chunks(chunks, max_len=None):\n    # type: (list[str], int|None) -&gt; dict\n    \"\"\"\n    Tokenize text chunks into model-compatible formats.\n\n    :param chunks: Text chunks to tokenize.\n    :param max_len: Truncates chunks above max_len characters\n    :return: Dictionary of tokenized data including input IDs, attention masks, and type IDs.\n    \"\"\"\n    pass\n</code></pre>"},{"location":"image/","title":"ISCC - Image Processing","text":"<p>Image handling module.</p>"},{"location":"image/#iscc_sdk.image.image_normalize","title":"<code>image_normalize(img)</code>","text":"<p>Normalize image for hash calculation.</p> <p>Parameters:</p> Name Type Description Default <code>img</code> <p>Pillow Image Object</p> required <p>Returns:</p> Type Description <p>Normalized and flattened image as 1024-pixel array (from 32x32 gray pixels)</p>"},{"location":"image/#iscc_sdk.image.image_exif_transpose","title":"<code>image_exif_transpose(img)</code>","text":"<p>Transpose image according to EXIF Orientation tag</p> <p>Parameters:</p> Name Type Description Default <code>img</code> <p>Pillow Image Object</p> required <p>Returns:</p> Type Description <p>EXIF transposed image</p>"},{"location":"image/#iscc_sdk.image.image_fill_transparency","title":"<code>image_fill_transparency(img)</code>","text":"<p>Add white background to image if it has alpha transparency.</p> <p>Parameters:</p> Name Type Description Default <code>img</code> <p>Pillow Image Object</p> required <p>Returns:</p> Type Description <p>RGB Image with transparency replaced by a white background</p>"},{"location":"image/#iscc_sdk.image.image_trim_border","title":"<code>image_trim_border(img)</code>","text":"<p>Trim uniform colored (empty) border.</p> <p>Takes the upper left pixel as reference for border color.</p> <p>Parameters:</p> Name Type Description Default <code>img</code> <p>Pillow Image Object</p> required <p>Returns:</p> Type Description <p>Image with uniform colored (empty) border removed.</p>"},{"location":"image/#iscc_sdk.image.image_meta_extract","title":"<code>image_meta_extract(fp)</code>","text":"<p>Extract metadata from image using native exiv2 bindings.</p> <p>Parameters:</p> Name Type Description Default <code>fp</code> <p>Filepath to image file.</p> required <p>Returns:</p> Type Description <p>Metadata mapped to IsccMeta schema</p>"},{"location":"image/#iscc_sdk.image.image_meta_embed","title":"<code>image_meta_embed(fp, meta)</code>","text":"<p>Embed metadata into a copy of the image file.</p> <p>Parameters:</p> Name Type Description Default <code>fp</code> <p>Filepath to source image file</p> required <code>meta</code> <p>Metadata to embed into image</p> required <p>Returns:</p> Type Description <p>Filepath to the new image file with updated metadata</p>"},{"location":"image/#iscc_sdk.image.image_meta_delete","title":"<code>image_meta_delete(fp)</code>","text":"<p>Delete all metadata from image.</p> <p>Parameters:</p> Name Type Description Default <code>fp</code> <p>Filepath to image file.</p> required"},{"location":"image/#iscc_sdk.image.image_thumbnail","title":"<code>image_thumbnail(fp)</code>","text":"<p>Create a thumbnail for an image.</p> <p>Parameters:</p> Name Type Description Default <code>fp</code> <p>Filepath to image file.</p> required <p>Returns:</p> Type Description <p>Thumbnail image as PIL Image object</p>"},{"location":"image/#iscc_sdk.image.image_strip_metadata","title":"<code>image_strip_metadata(img)</code>","text":"<p>Strip all metadata from Pillow Image object.</p> <p>Parameters:</p> Name Type Description Default <code>img</code> <p>PIL Image object to strip metadata from.</p> required <p>Returns:</p> Type Description <p>Image.Image</p>"},{"location":"image/#iscc_sdk.image.image_to_data_url","title":"<code>image_to_data_url(img)</code>","text":"<p>Convert PIL Image object to WebP Data-URL.</p> <p>Parameters:</p> Name Type Description Default <code>img</code> <p>PIL Image object to encode as WebP Data-URL.</p> required <p>Returns:</p> Type Description <p>Data-URL string</p>"},{"location":"main/","title":"ISCC - Main High-Level Functions","text":"<p>SDK main top-level functions.</p>"},{"location":"main/#iscc_sdk.main.code_iscc","title":"<code>code_iscc(fp, name=None, description=None, meta=None, **options)</code>","text":"<p>Generate a complete ISCC-CODE for the given file.</p> <p>This function creates a full ISCC-CODE by combining Meta, Content, Data, and Instance Codes. It automatically detects the media type and processes the file accordingly.</p> <p>The function performs the following steps: 1. Reads the file and determines its media type. 2. Generates Data &amp; Instance Codes for all file types using the <code>code_sum</code> function. 3. For supported media types, generates Content Code and optional Semantic Code. 4. If enabled, generates Meta-Code from embedded or provided metadata. 5. Combines all generated code units into a single ISCC-CODE. 6. Merges metadata from all ISCC units.</p> <p>ISCC-CODE is a composite identifier that consists of multiple ISCC-UNITs, each serving a specific purpose: - Meta-Code: Based on normalized metadata (title, description) - Semantic-Code: Based on semantic features (experimental, requires additional packages) - Content-Code: Based on the content features (text, image, audio, video) - Data-Code: Based on the raw binary data (similarity preserving hash) - Instance-Code: Based on the exact binary data (cryptographic hash)</p> <p>Note: - The behavior can be customized through the <code>sdk_opts</code> settings. For example, setting   <code>fallback</code> to True will allow processing of unsupported media types in a   fallback mode instead of raising an exception. - For processing container files (like EPUB with embedded files), set <code>process_container</code>   to True to extract and process contained files.</p> <p>Parameters:</p> Name Type Description Default <code>fp</code> <p>Path object or str representing the filepath of the file to process.</p> required <code>name</code> <p>Optional name to override extracted metadata.</p> <code>None</code> <code>description</code> <p>Optional description to override extracted metadata.</p> <code>None</code> <code>meta</code> <p>Optional metadata (dict or Data-URL as string) to override extracted metadata.</p> <code>None</code> <code>extract_meta</code> <p>Whether to extract metadata. Default: True</p> required <code>fallback</code> <p>Process unsupported media types. Default: False</p> required <code>add_units</code> <p>Include ISCC-UNITS in metadata. Default: False</p> required <code>create_meta</code> <p>Create Meta-Code. Default: True</p> required <code>wide</code> <p>Enable wide mode for ISCC-SUM with Data &amp; Instance codes only. Default: False</p> required <code>experimental</code> <p>Enable experimental semantic codes. Default: False</p> required <code>process_container</code> <p>Process container files and extract contained files. Default: False</p> required <code>granular</code> <p>Generate additional granular fingerprints. Default: False</p> required <p>Returns:</p> Type Description <p>IsccMeta object with complete ISCC-CODE and merged metadata from all ISCC-UNITs.</p> <p>Raises:</p> Type Description <code>idk.IsccUnsupportedMediatype</code> <p>If the media type is not supported. By default, the function will raise this exception for unsupported media types, as sdk_opts.fallback is False by default.</p>"},{"location":"main/#iscc_sdk.main.code_meta","title":"<code>code_meta(fp, name=None, description=None, meta=None, **options)</code>","text":"<p>Generate Meta-Code for digital asset.</p> <p>Creates an ISCC Meta-Code based on normalized metadata extracted from the file. If no name is found in metadata, the filename will be used instead.</p> <p>Parameters:</p> Name Type Description Default <code>fp</code> <p>Filepath used for Meta-Code creation.</p> required <code>name</code> <p>Optional name to override extracted metadata.</p> <code>None</code> <code>description</code> <p>Optional description to override extracted metadata.</p> <code>None</code> <code>meta</code> <p>Optional metadata (Data-URL as sting or dict) to override extracted metadata.</p> <code>None</code> <code>extract_meta</code> <p>Whether to extract metadata. Default: True</p> required <code>bits</code> <p>Bit-length of the generated Meta-Code UNIT. Default: 64</p> required <p>Returns:</p> Type Description <p>ISCC metadata including Meta-Code and extracted metadata fields.</p>"},{"location":"main/#iscc_sdk.main.code_content","title":"<code>code_content(fp, **options)</code>","text":"<p>Detect mediatype and create corresponding Content-Code.</p> <p>Analyzes the file to determine its media type and routes the processing to the appropriate specialized function (code_text, code_image, code_audio, or code_video).</p> <p>Parameters:</p> Name Type Description Default <code>fp</code> <p>Filepath</p> required <code>extract_meta</code> <p>Whether to extract metadata. Default: True</p> required <code>create_thumb</code> <p>Whether to create a thumbnail. Default: True</p> required <p>Returns:</p> Type Description <p>Content-Code wrapped in ISCC metadata.</p> <p>Raises:</p> Type Description <code>idk.IsccUnsupportedMediatype</code> <p>If the media type is not supported.</p>"},{"location":"main/#iscc_sdk.main.code_text","title":"<code>code_text(fp, text=None, **options)</code>","text":"<p>Generate Content-Code Text.</p> <p>Creates a Text-Code by extracting and processing text content from document files. Can optionally extract metadata and create a thumbnail representation of the text.</p> <p>Parameters:</p> Name Type Description Default <code>fp</code> <p>Filepath used for Text-Code creation.</p> required <code>text</code> <p>Optional cleaned text. If provided, the function will skip text extraction.</p> <code>None</code> <code>extract_meta</code> <p>Whether to extract metadata. Default: True</p> required <code>create_thumb</code> <p>Whether to create a thumbnail. Default: True</p> required <code>bits</code> <p>Bit-length of the generated Text-Code UNIT. Default: 64</p> required <code>granular</code> <p>Whether to generate additional granular fingerprints. Default: False</p> required <p>Returns:</p> Type Description <p>ISCC metadata including Text-Code.</p>"},{"location":"main/#iscc_sdk.main.code_text_semantic","title":"<code>code_text_semantic(fp, text=None, **options)</code>","text":"<p>Generate Semantic-Code Text. (Requires iscc-sct to be installed)</p> <p>Parameters:</p> Name Type Description Default <code>fp</code> <p>Filepath used for semantic Text-Code creation.</p> required <code>text</code> <p>Optional cleaned text. If provided, the function will skip text extraction.</p> <code>None</code> <p>Raises:</p> Type Description <code>idk.EnvironmentError</code> <p>If iscc-sct is not installed.</p>"},{"location":"main/#iscc_sdk.main.code_image","title":"<code>code_image(fp, **options)</code>","text":"<p>Generate Content-Code Image.</p> <p>Creates an Image-Code by normalizing and processing the visual content of image files. The image is normalized according to SDK options (transparency handling, border trimming, ...).</p> <p>Parameters:</p> Name Type Description Default <code>fp</code> <p>Filepath used for Image-Code creation.</p> required <code>extract_meta</code> <p>Whether to extract metadata. Default: True</p> required <code>create_thumb</code> <p>Whether to create a thumbnail. Default: True</p> required <code>bits</code> <p>Bit-length of the generated Image-Code UNIT. Default: 64</p> required <p>Returns:</p> Type Description <p>ISCC metadata including Image-Code.</p>"},{"location":"main/#iscc_sdk.main.code_image_semantic","title":"<code>code_image_semantic(fp, **options)</code>","text":"<p>Generate Semantic-Code Image. (Requires iscc-sci to be installed)</p> <p>Parameters:</p> Name Type Description Default <code>fp</code> <p>Filepath used for semantic Image-Code creation.</p> required <p>Raises:</p> Type Description <code>idk.EnvironmentError</code> <p>If iscc-sci is not installed.</p>"},{"location":"main/#iscc_sdk.main.code_audio","title":"<code>code_audio(fp, **options)</code>","text":"<p>Generate Content-Code Audio.</p> <p>Creates an Audio-Code by extracting acoustic fingerprints from audio files. Uses chromaprint/fpcalc to generate audio features for similarity matching.</p> <p>Parameters:</p> Name Type Description Default <code>fp</code> <p>Filepath used for Audio-Code creation.</p> required <code>extract_meta</code> <p>Whether to extract metadata. Default: True</p> required <code>create_thumb</code> <p>Whether to create a thumbnail. Default: True</p> required <code>bits</code> <p>Bit-length of the generated Audio-Code UNIT. Default: 64</p> required <p>Returns:</p> Type Description <p>ISCC metadata including Audio-Code.</p>"},{"location":"main/#iscc_sdk.main.code_video","title":"<code>code_video(fp, **options)</code>","text":"<p>Generate Content-Code Video.</p> <p>Creates a Video-Code by extracting and processing visual features from video frames. Uses MPEG-7 signature tools to extract frame-based features and optionally detect scene changes.</p> <p>Parameters:</p> Name Type Description Default <code>fp</code> <p>Filepath used for Video-Code creation.</p> required <code>extract_meta</code> <p>Whether to extract metadata. Default: True</p> required <code>create_thumb</code> <p>Whether to create a thumbnail. Default: True</p> required <code>granular</code> <p>Generate additional fingerprints based on scenes. Default: False</p> required <code>video_store_mp7sig</code> <p>Whether to store extracted MP7 Video signature file. Default: False</p> required <code>bits</code> <p>Bit-length of the generated Video-Code UNIT. Default: 64</p> required <p>Returns:</p> Type Description <p>ISCC metadata including Video-Code.</p>"},{"location":"main/#iscc_sdk.main.code_data","title":"<code>code_data(fp, **options)</code>","text":"<p>Create ISCC Data-Code.</p> <p>The Data-Code is a similarity preserving hash of the raw input data that allows for detection of similar binary data regardless of file format or metadata differences.</p> <p>Parameters:</p> Name Type Description Default <code>fp</code> <p>Filepath used for Data-Code creation.</p> required <code>bits</code> <p>Bit-length of the generated Data-Code UNIT. Default: 64</p> required <p>Returns:</p> Type Description <p>ISCC metadata including Data-Code.</p>"},{"location":"main/#iscc_sdk.main.code_instance","title":"<code>code_instance(fp, **options)</code>","text":"<p>Create ISCC Instance-Code.</p> <p>The Instance-Code is a cryptographic hash (blake3) of the input data. Its purpose is to serve as a checksum that detects even minimal changes to the data of the referenced media asset. For cryptographically secure integrity checking, a full 256-bit multihash is provided with the <code>datahash</code> field.</p> <p>Parameters:</p> Name Type Description Default <code>fp</code> <p>Filepath used for Instance-Code creation.</p> required <code>bits</code> <p>Bit-length of the generated Instance-Code UNIT. Default: 64</p> required <p>Returns:</p> Type Description <p>ISCC metadata including Instance-Code, datahash, and filesize.</p>"},{"location":"main/#iscc_sdk.main.code_sum","title":"<code>code_sum(fp, **options)</code>","text":"<p>Create and ISCC-CODE with Data- and Instance-Code UNITs</p> <p>Reads file data only once and creates both Data-Code and Instance-Code in one go.</p> <p>Parameters:</p> Name Type Description Default <code>fp</code> <p>Filepath used for ISCC-CODE Sum creation.</p> required <code>wide</code> <p>Whether to use wide or narrow ISCC-CODE (64-bit or 128-bit UNITs)</p> required <p>Returns:</p> Type Description <p>ISCC metadata.</p>"},{"location":"mediatype/","title":"ISCC - Mediatype Detection","text":"<p>Detect and map RFC6838 mediatypes to ISCC processing modes.</p>"},{"location":"mediatype/#iscc_sdk.mediatype.mediatype_and_mode","title":"<code>mediatype_and_mode(fp)</code>","text":"<p>Detect mediatype and processing mode for a file.</p> <p>Example</p> <pre><code>&gt;&gt;&gt; import iscc_sdk\n&gt;&gt;&gt; iscc_sdk.mediatype_and_mode('some.pdf')\n('application/pdf', 'text')\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>fp</code> <p>Filepath</p> required <p>Returns:</p> Type Description <p>A tuple of <code>mediatype</code> and <code>mode</code></p>"},{"location":"mediatype/#iscc_sdk.mediatype.mediatype_guess","title":"<code>mediatype_guess(data, file_name=None)</code>","text":"<p>Guess mediatype from raw data or filename.</p> <p>First try to guess by file extension. If that fails we match by content sniffing.</p> <p>Example</p> <pre><code>&gt;&gt;&gt; import iscc_sdk\n&gt;&gt;&gt; iscc_sdk.mediatype_guess(b'GIF89a')\n'image/gif'\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>bytes</code> <p>Raw file data (first 4096 bytes recommended)</p> required <code>file_name</code> <code>Optional[str]</code> <p>Filename for guessing based on file extension</p> <code>None</code> <p>Returns:</p> Type Description <code>str</code> <p>Media type sting</p>"},{"location":"mediatype/#iscc_sdk.mediatype.mediatype_normalize","title":"<code>mediatype_normalize(mime)</code>","text":"<p>Normalize mediatype string.</p> <p>Example</p> <pre><code>&gt;&gt;&gt; import iscc_sdk\n&gt;&gt;&gt; iscc_sdk.mediatype_normalize(\"audio/x-aiff\")\n'\"audio/aiff\"'\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>mime</code> <code>str</code> <p>Mediatype sting</p> required <p>Returns:</p> Type Description <code>str</code> <p>Normalized mediatype string</p>"},{"location":"mediatype/#iscc_sdk.mediatype.mediatype_supported","title":"<code>mediatype_supported(mime)</code>","text":"<p>Check if mediatype is supported.</p> <p>Parameters:</p> Name Type Description Default <code>mime</code> <code>str</code> <p>Mediatype sting</p> required <p>Returns:</p> Type Description <code>bool</code> <p>True if mediatype is supported</p>"},{"location":"mediatype/#iscc_sdk.mediatype.mediatype_from_name","title":"<code>mediatype_from_name(name)</code>","text":"<p>Guess mediatype from filename or URL.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>Filename or URL</p> required <p>Returns:</p> Type Description <code>str</code> <p>Mediatype string</p>"},{"location":"mediatype/#iscc_sdk.mediatype.mediatype_from_data","title":"<code>mediatype_from_data(data)</code>","text":"<p>Guess mediatype by sniffing raw header data.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>bytes</code> <p>Raw fileheader data (first 4096 bytes recommended)</p> required <p>Returns:</p> Type Description <code>str</code> <p>Mediatype string</p>"},{"location":"mediatype/#iscc_sdk.mediatype.mediatype_clean","title":"<code>mediatype_clean(mime)</code>","text":"<p>Clean mediatype/content-type string or first entry of a list of mimetype strings.</p> <p>Also removes semicolon separated encoding information.</p> <p>Parameters:</p> Name Type Description Default <code>mime</code> <code>str|List</code> <p>Mediatype or list of mediatypes</p> required <p>Returns:</p> Type Description <code>str</code> <p>Mediatype string</p>"},{"location":"mediatype/#iscc_sdk.mediatype.mediatype_to_mode","title":"<code>mediatype_to_mode(mime_type)</code>","text":"<p>Get perceptual processing mode from mimetype.</p> <p>Parameters:</p> Name Type Description Default <code>mime_type</code> <p>RFC-6838 mediatype string</p> required <p>Raises:</p> Type Description <code>IsccUnsupportedMediatype</code> <p>if no matching processing mode was found.</p>"},{"location":"metadata/","title":"ISCC - Metadata Handling","text":"<p>Metadata handling functions</p>"},{"location":"metadata/#iscc_sdk.metadata.extract_metadata","title":"<code>extract_metadata(fp)</code>","text":"<p>Extract metadata from file.</p> <p>Parameters:</p> Name Type Description Default <code>fp</code> <p>Filepath to media file.</p> required <p>Returns:</p> Type Description <p>Metadata mapped to IsccMeta schema</p>"},{"location":"metadata/#iscc_sdk.metadata.embed_metadata","title":"<code>embed_metadata(fp, meta)</code>","text":"<p>Embed metadata into a copy of the media file and return path to updated file.</p> <p>Parameters:</p> Name Type Description Default <code>fp</code> <code>str</code> <p>Filepath to source media file</p> required <code>meta</code> <code>IsccMeta</code> <p>Metadata to embed into media file</p> required <p>Returns:</p> Type Description <code>str|None</code> <p>Filepath to the new media file with embedded metadata (None if no embedding supported)</p>"},{"location":"metadata/#iscc_sdk.metadata.IsccMeta","title":"<code>IsccMeta</code>","text":"<p>Custom IsccMeta with text trimming and recursive <code>parts</code> support</p>"},{"location":"options/","title":"ISCC - Configuration Options","text":"<p>SDK options can be configured using environment variables. Variables are defined as class-atributes on the <code>SdkOptions</code> instance.</p> <p>Example how to access configuration options</p> <pre><code>import iscc_sdk as idk\n\n# To access ISCC_SDK_VIDEO_FPS setting use\nfps: int = idk.sdk_opts.video_fps\n</code></pre>"},{"location":"options/#iscc_sdk.options.SdkOptions","title":"SdkOptions","text":"<p>SDK Configuration Options</p>"},{"location":"options/#iscc_sdk.options.SdkOptions.granular","title":"granular  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>granular: bool = Field(\n    default=False,\n    description=\"ISCC_SDK_GRANULAR - Generate additional granular fingerprints for ISCC-CODES\",\n)\n</code></pre>"},{"location":"options/#iscc_sdk.options.SdkOptions.byte_offsets","title":"byte_offsets  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>byte_offsets: bool = Field(\n    False,\n    description=\"ISCC_SDK_BYTE_OFFSETS - Use UTF-8 byte offsets instead of character offsets for granular fingerprints\",\n)\n</code></pre>"},{"location":"options/#iscc_sdk.options.SdkOptions.process_container","title":"process_container  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>process_container: bool = Field(\n    default=False,\n    description=\"ISCC_SDK_PROCESS_CONTAINER - Process embedded elements in container formats\",\n)\n</code></pre>"},{"location":"options/#iscc_sdk.options.SdkOptions.experimental","title":"experimental  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>experimental: bool = Field(\n    default=False,\n    description=\"ISCC_SDK_EXPERIMENTAL - Enable experimental features like Semantic Code units\",\n)\n</code></pre>"},{"location":"options/#iscc_sdk.options.SdkOptions.min_image_size","title":"min_image_size  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>min_image_size: int = Field(\n    default=256,\n    description=\"ISCC_SDK_MIN_IMAGE_SIZE - Minimum image size in pixels for container processing\",\n)\n</code></pre>"},{"location":"options/#iscc_sdk.options.SdkOptions.add_units","title":"add_units  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>add_units: bool = Field(\n    default=False,\n    description=\"ISCC_SDK_ADD_UNITS - Add ISCC-UNITS to ISCC metadata (in 'units' property)\",\n)\n</code></pre>"},{"location":"options/#iscc_sdk.options.SdkOptions.bits","title":"bits  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>bits: int = Field(\n    default=64,\n    description=\"ISCC_SDK_BITS - Bit size of ISCC-UNITS in ISCC metadata (in 'units' property)\",\n)\n</code></pre>"},{"location":"options/#iscc_sdk.options.SdkOptions.wide","title":"wide  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>wide: bool = Field(\n    default=False,\n    description=\"ISCC_SDK_WIDE - For ISCC-SUM with Data &amp; Instance codes only support wide mode\",\n)\n</code></pre>"},{"location":"options/#iscc_sdk.options.SdkOptions.extract_meta","title":"extract_meta  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>extract_meta: bool = Field(\n    default=True,\n    description=\"ISCC_EXTRACT_META - Extract metadata from digital assets (defaut: True)\",\n)\n</code></pre>"},{"location":"options/#iscc_sdk.options.SdkOptions.create_meta","title":"create_meta  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>create_meta: bool = Field(\n    default=True,\n    description=\"ISCC_CREATE_META - Create Meta-Code from embedded metadata (defaut: True)\",\n)\n</code></pre>"},{"location":"options/#iscc_sdk.options.SdkOptions.create_thumb","title":"create_thumb  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>create_thumb: bool = Field(\n    default=True,\n    description=\"ISCC_CREATE_THUMBNAIL - Create thumbail for digital assets (defaut: True)\",\n)\n</code></pre>"},{"location":"options/#iscc_sdk.options.SdkOptions.image_exif_transpose","title":"image_exif_transpose  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>image_exif_transpose: bool = Field(\n    default=True,\n    description=\"ISCC_SDK_IMAGE_EXIF_TRANSPOSE - Transpose image according to EXIF Orientation tag\",\n)\n</code></pre>"},{"location":"options/#iscc_sdk.options.SdkOptions.image_fill_transparency","title":"image_fill_transparency  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>image_fill_transparency: bool = Field(\n    default=True,\n    description=\"ISCC_SDK_IMAGE_FILL_TRANSPARENCY - Add white background to image if it has alpha transparency\",\n)\n</code></pre>"},{"location":"options/#iscc_sdk.options.SdkOptions.image_trim_border","title":"image_trim_border  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>image_trim_border: bool = Field(\n    default=True,\n    description=\"ISCC_SDK_IMAGE_TRIM_BORDER - Crop empty borders of images\",\n)\n</code></pre>"},{"location":"options/#iscc_sdk.options.SdkOptions.image_thumbnail_size","title":"image_thumbnail_size  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>image_thumbnail_size: int = Field(\n    default=128,\n    description=\"ISCC_SDK_IMAGE_THUMBNAIL_SIZE - Size of larger side of thumbnail in number of pixels\",\n)\n</code></pre>"},{"location":"options/#iscc_sdk.options.SdkOptions.image_thumbnail_quality","title":"image_thumbnail_quality  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>image_thumbnail_quality: int = Field(\n    default=30,\n    description=\"ISCC_SDK_IMAGE_THUMBNAIL_QUALITY - Thumbnail image compression setting (0-100)\",\n)\n</code></pre>"},{"location":"options/#iscc_sdk.options.SdkOptions.image_thumbnail_format","title":"image_thumbnail_format  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>image_thumbnail_format: Literal[\"JPEG\", \"WEBP\", \"AVIF\"] = (\n    Field(\n        default=\"WEBP\",\n        description=\"ISCC_SDK_IMAGE_THUMBNAIL_FORMAT - Format for thumbnail images (JPEG, WEBP, or AVIF)\",\n    )\n)\n</code></pre>"},{"location":"options/#iscc_sdk.options.SdkOptions.image_max_pixels","title":"image_max_pixels  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>image_max_pixels: Optional[int] = Field(\n    default=128000000,\n    description=\"ISCC_SDK_IMAGE_MAX_PIXELS - Maximum number of pixels allowed for processing (default 128Mpx / 0.5GB RGB)\",\n)\n</code></pre>"},{"location":"options/#iscc_sdk.options.SdkOptions.text_keep","title":"text_keep  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>text_keep: bool = Field(\n    default=False,\n    description=\"ISCC_SDK_TEXT_KEEP - Keep extracted plainext on `IsccMata.text` property\",\n)\n</code></pre>"},{"location":"options/#iscc_sdk.options.SdkOptions.text_avg_chunk_size","title":"text_avg_chunk_size  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>text_avg_chunk_size: int = Field(\n    default=512,\n    description=\"ISCC_SDK_TEXT_AVG_CHUNK_SIZE - Avg number of characters per text chunk for Content-Code Text granular fingerprints\",\n)\n</code></pre>"},{"location":"options/#iscc_sdk.options.SdkOptions.video_fps","title":"video_fps  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>video_fps: int = Field(\n    default=5,\n    description=\"ISCC_SDK_VIDEO_FPS - Frames per second to process for video hash (ignored when 0).\",\n)\n</code></pre>"},{"location":"options/#iscc_sdk.options.SdkOptions.video_scene_limit","title":"video_scene_limit  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>video_scene_limit: float = Field(\n    default=0.4,\n    description=\"ISCC_SDK_VIDEO_SCENE_LIMIT - Threshold value above which a scene cut is created (default 0.4)\",\n)\n</code></pre>"},{"location":"options/#iscc_sdk.options.SdkOptions.video_store_mp7sig","title":"video_store_mp7sig  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>video_store_mp7sig: bool = Field(\n    default=False,\n    description=\"ISCC_SDK_VIDEO_STORE_MP7SIG - Store extracted MP7 Video as &lt;videofile&gt;.iscc.mp7sig\",\n)\n</code></pre>"},{"location":"options/#iscc_sdk.options.SdkOptions.fallback","title":"fallback  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>fallback: bool = Field(\n    default=False,\n    description=\"ISCC_SDK_FALLBACK - Create 2-UNIT ISCC-SUM for unsupported media types\",\n)\n</code></pre>"},{"location":"options/#iscc_sdk.options.SdkOptions.override","title":"override","text":"<pre><code>override(update=None)\n</code></pre> <p>Returns an updated and validated deep copy of the current settings instance.</p>"},{"location":"options/#iscc_sdk.options.sdk_opts","title":"sdk_opts  <code>module-attribute</code>","text":"<pre><code>sdk_opts = SdkOptions()\n</code></pre>"},{"location":"options/#iscc_sdk.options.core_opts","title":"core_opts  <code>module-attribute</code>","text":"<pre><code>core_opts = core_opts\n</code></pre>"},{"location":"text/","title":"ISCC - Text Processing","text":"<p>Text handling functions.</p>"},{"location":"text/#iscc_sdk.text.text_meta_extract","title":"<code>text_meta_extract(fp)</code>","text":"<p>Extract metadata from text document file.</p> <p>Parameters:</p> Name Type Description Default <code>fp</code> <p>Filepath to text document file.</p> required <p>Returns:</p> Type Description <p>Metadata mapped to IsccMeta schema</p>"},{"location":"text/#iscc_sdk.text.text_meta_embed","title":"<code>text_meta_embed(fp, meta)</code>","text":"<p>Embed metadata into a copy of the text document.</p> <p>Parameters:</p> Name Type Description Default <code>fp</code> <p>Filepath to source text document file</p> required <code>meta</code> <p>Metadata to embed into text document</p> required <p>Returns:</p> Type Description <p>Filepath to the new file with updated metadata (None if no embedding supported)</p>"},{"location":"text/#iscc_sdk.text.text_extract","title":"<code>text_extract(fp)</code>","text":"<p>Extract plaintext from a text document.</p> <p>Parameters:</p> Name Type Description Default <code>fp</code> <p>Filepath to text document file.</p> required <p>Returns:</p> Type Description <p>Extracted plaintext</p>"},{"location":"text/#iscc_sdk.text.text_features","title":"<code>text_features(text, **options)</code>","text":"<p>Create granular simprints for text (minhashes over ngrams from cdc-chunks). Text should be normalized and cleaned before extracting text features.</p> <p>Parameters:</p> Name Type Description Default <code>text</code> <p>Normalized and cleaned plaintext.</p> required <code>byte_offsets</code> <p>Calculate offsets and sizes in UTF-8 bytes instead of chars. Default: False</p> required <p>Returns:</p> Type Description <p>Dictionary with 'sizes', 'features', 'offsets', and 'contents'.</p>"},{"location":"text/#iscc_sdk.text.text_chunks","title":"<code>text_chunks(text, avg_size=idk.sdk_opts.text_avg_chunk_size)</code>","text":"<p>Generates variable-sized text chunks (without leading BOM).</p> <p>:yields: Text chunks.</p> <p>Parameters:</p> Name Type Description Default <code>text</code> <p>Normalized plaintext</p> required <code>avg_size</code> <p>Targeted average size of text chunks in characters.</p> <code>text_avg_chunk_size</code>"},{"location":"text/#iscc_sdk.text.text_name_from_uri","title":"<code>text_name_from_uri(uri)</code>","text":"<p>Extract <code>filename</code> part of an uri without file extension to be used as a fallback title for an asset if no title information can be acquired.</p> <p>Parameters:</p> Name Type Description Default <code>uri</code> <p>Url or file path</p> required <p>Returns:</p> Type Description <p>derived name (might be an empty string)</p>"},{"location":"text/#iscc_sdk.text.text_thumbnail","title":"<code>text_thumbnail(fp)</code>","text":"<p>Create a thumbnail for a text document.</p> <p>Parameters:</p> Name Type Description Default <code>fp</code> <p>Filepath to a text document.</p> required <p>Returns:</p> Type Description <p>Thumbnail image as a PIL Image object</p>"},{"location":"text/#iscc_sdk.text.text_sanitize","title":"<code>text_sanitize(text)</code>","text":"<p>Sanitize text from untrusted sources (metadata extracted from assets)</p>"},{"location":"video/","title":"ISCC - Video Processing","text":"<p>Video handling module</p>"},{"location":"video/#iscc_sdk.video.video_meta_extract","title":"<code>video_meta_extract(fp)</code>","text":"<p>Extract video metadata using FFMPEG and FFPROBE</p> <p>Parameters:</p> Name Type Description Default <code>fp</code> <p>Filepath to video file</p> required <p>Returns:</p> Type Description <p>Metdata mapped to IsccMeta schema</p>"},{"location":"video/#iscc_sdk.video.video_meta_embed","title":"<code>video_meta_embed(fp, meta)</code>","text":"<p>Embed metadata into a copy of the video file.</p> <p>Supported fields: name, description, meta, creator, license, aquire</p> <p>Parameters:</p> Name Type Description Default <code>fp</code> <p>Filepath to source video file</p> required <code>meta</code> <p>Metadata to embed into video</p> required <p>Returns:</p> Type Description <p>Filepath to new video file with updated metadata</p>"},{"location":"video/#iscc_sdk.video.video_thumbnail","title":"<code>video_thumbnail(fp)</code>","text":"<p>Create a thumbnail for a video.</p> <p>Parameters:</p> Name Type Description Default <code>fp</code> <p>Filepath to video file.</p> required <p>Returns:</p> Type Description <code>bytes</code> <p>Raw PNG byte data</p>"},{"location":"video/#iscc_sdk.video.video_features_extract","title":"<code>video_features_extract(fp)</code>","text":"<p>Extract video features.</p> <p>Parameters:</p> Name Type Description Default <code>fp</code> <p>Filepath to video file.</p> required <p>Returns:</p> Type Description <p>A sequence of frame signatures.</p>"},{"location":"video/#iscc_sdk.video.video_mp7sig_extract","title":"<code>video_mp7sig_extract(fp)</code>","text":"<p>Extract MPEG-7 Video Signature.</p> <p>Parameters:</p> Name Type Description Default <code>fp</code> <p>Filepath to video file.</p> required <p>Returns:</p> Type Description <p>raw signature data</p>"},{"location":"video/#iscc_sdk.video.video_mp7sig_extract_scenes","title":"<code>video_mp7sig_extract_scenes(fp, scene_limit=None)</code>","text":"<p>Extract MPEG-7 Video Signature and Scenes.</p> <p>Parameters:</p> Name Type Description Default <code>fp</code> <p>Filepath to video file.</p> required <code>scene_limit</code> <p>Threshold value above which a scene cut is created (0.4)</p> <code>None</code> <p>Returns:</p> Type Description <p>tuple of raw signature data and list of scene cutpoints</p>"},{"location":"video/#iscc_sdk.video.video_parse_scenes","title":"<code>video_parse_scenes(scene_text, scene_limit=None)</code>","text":"<p>Parse scene score output from ffmpeg</p> <p>Parameters:</p> Name Type Description Default <code>scene_text</code> <p>Scene score output from ffmpeg</p> required <code>scene_limit</code> <p>Threshold value above which a scene cut is created (0.4)</p> <code>None</code> <p>Returns:</p> Type Description <p>Scene cutpoints</p>"},{"location":"video/#iscc_sdk.video.video_compute_granular","title":"<code>video_compute_granular(frames, scenes)</code>","text":"<p>Compute video signatures for individual scenes in video.</p> <p>Parameters:</p> Name Type Description Default <code>frames</code> <p>List of video frames.</p> required <code>scenes</code> <p>List of video scene cutpints.</p> required <p>Returns:</p> Type Description <p>A dictionary conforming to <code>shema.Feature</code>- objects.</p>"},{"location":"ai/exiv2/","title":"Exiv2","text":"<p>This file is a merged representation of a subset of the codebase, containing specifically included files, combined into a single document by Repomix. The content has been processed where security check has been disabled.</p>"},{"location":"ai/exiv2/#file-summary","title":"File Summary","text":""},{"location":"ai/exiv2/#purpose","title":"Purpose","text":"<p>This file contains a packed representation of the entire repository's contents. It is designed to be easily consumable by AI systems for analysis, code review, or other automated processes.</p>"},{"location":"ai/exiv2/#file-format","title":"File Format","text":"<p>The content is organized as follows:</p> <ol> <li>This summary section</li> <li>Repository information</li> <li>Directory structure</li> <li>Multiple file entries, each consisting of: a. A header with the file path (## File: path/to/file)    b. The full contents of the file in a code block</li> </ol>"},{"location":"ai/exiv2/#usage-guidelines","title":"Usage Guidelines","text":"<ul> <li>This file should be treated as read-only. Any changes should be made to the original repository   files, not this packed version.</li> <li>When processing this file, use the file path to distinguish between different files in the   repository.</li> <li>Be aware that this file may contain sensitive information. Handle it with the same level of   security as you would the original repository.</li> </ul>"},{"location":"ai/exiv2/#notes","title":"Notes","text":"<ul> <li>Some files may have been excluded based on .gitignore rules and Repomix's configuration</li> <li>Binary files are not included in this packed representation. Please refer to the Repository   Structure section for a complete list of file paths, including binary files</li> <li>Only files matching these patterns are included: **/*.rst</li> <li>Files matching patterns in .gitignore are excluded</li> <li>Files matching default ignore patterns are excluded</li> <li>Security check has been disabled - content may contain sensitive information</li> </ul>"},{"location":"ai/exiv2/#additional-info","title":"Additional Info","text":""},{"location":"ai/exiv2/#directory-structure","title":"Directory Structure","text":"<pre><code>examples/\n  README.rst\nsrc/\n  doc/\n    _templates/\n      module.rst\n    misc/\n      api.rst\n      changelog.rst\n      install.rst\n      readme.rst\n      usage.rst\n    index.rst\nINSTALL.rst\nREADME.rst\nUSAGE.rst\n</code></pre>"},{"location":"ai/exiv2/#files","title":"Files","text":""},{"location":"ai/exiv2/#file-examplesreadmerst","title":"File: examples/README.rst","text":"<pre><code>Examples\n========\n\nThese example files show some typical (and not so typical) ways to use the Python exiv2 interface.\nSome of them are based on the `C++ examples`_ provided by the Exiv2 project.\nIt might be instructive to compare the C++ and Python ways of doing the same thing.\n\n.. _C++ examples:      https://www.exiv2.org/doc/examples.html\n</code></pre>"},{"location":"ai/exiv2/#file-srcdoc_templatesmodulerst","title":"File: src/doc/_templates/module.rst","text":"<pre><code>{% if fullname == \"exiv2._version\" %}\n    {% set attributes = ['__version__', '__version_tuple__'] %}\n{% endif %}\n\n{% extends \"!autosummary/module.rst\" %}\n\n   {% block classes %}\n   {% if classes %}\n   .. rubric:: {{ _('Classes') }}\n\n   {% if fullname == \"exiv2._value\" %}\n   .. inheritance-diagram:: {{ classes |\n                               reject(\"in\", [\"Date\", \"Time\"]) |\n                               join(\" \") }}\n       :top-classes: exiv2.value.Value\n   {% endif %}\n\n   {% if fullname in [\"exiv2._datasets\", \"exiv2._metadatum\", \"exiv2._properties\", \"exiv2._tags\"] %}\n   .. inheritance-diagram:: exiv2.ExifKey exiv2.IptcKey exiv2.XmpKey\n       :top-classes: exiv2.metadatum.Key\n   {% endif %}\n\n   {% if fullname in [\"exiv2._exif\", \"exiv2._iptc\", \"exiv2._metadatum\", \"exiv2._xmp\"] %}\n   .. inheritance-diagram:: exiv2.Exifdatum exiv2.Iptcdatum exiv2.Xmpdatum\n       :top-classes: exiv2.metadatum.Metadatum\n   {% endif %}\n\n   .. autosummary::\n   {% for item in classes %}\n      {{ item }}\n   {%- endfor %}\n   {% endif %}\n   {% endblock %}\n</code></pre>"},{"location":"ai/exiv2/#file-srcdocmiscapirst","title":"File: src/doc/misc/api.rst","text":"<pre><code>.. This is part of the python-exiv2 documentation.\n   Copyright (C)  2024  Jim Easterbrook.\n\nDetailed API\n============\n\nThis part of the documentation is auto-generated from the Doxygen_ format documentation in the libexiv2 \"header\" files.\nThere are many ways in which the conversion process can fail, so you may need to consult the `Exiv2 C++ API`_ documentation as well.\n\nThe documentation is split into several pages, one for each module in the Python interface.\nThis makes it easier to use than having all the classes and functions in one document.\nDo not use the module names in your Python scripts: always use ``exiv2.name`` rather than ``exiv2.module.name`` or ``exiv2._module.name``.\n\nSee :ref:`genindex` for a full index to all classes, attributes, functions and methods.\n\n.. autosummary::\n   :toctree: ../api\n   :recursive:\n   :template: module.rst\n\n   exiv2._image\n   exiv2._exif\n   exiv2._iptc\n   exiv2._xmp\n   exiv2._preview\n   exiv2._value\n   exiv2._types\n   exiv2._tags\n   exiv2._datasets\n   exiv2._properties\n   exiv2._version\n   exiv2._error\n   exiv2._easyaccess\n   exiv2._basicio\n   exiv2._metadatum\n\n.. _Doxygen: https://www.doxygen.nl/\n.. _Exiv2 C++ API: https://exiv2.org/doc/index.html\n</code></pre>"},{"location":"ai/exiv2/#file-srcdocmiscchangelogrst","title":"File: src/doc/misc/changelog.rst","text":"<pre><code>.. This is part of the python-exiv2 documentation.\n   Copyright (C)  2024  Jim Easterbrook.\n\nRelease history\n===============\n\n.. literalinclude:: ../../../CHANGELOG.txt\n   :language: none\n   :start-after: licenses/&gt;\n   :end-before: Changes in v0.4.0\n</code></pre>"},{"location":"ai/exiv2/#file-srcdocmiscinstallrst","title":"File: src/doc/misc/install.rst","text":"<pre><code>.. This is part of the python-exiv2 documentation.\n   Copyright (C)  2024  Jim Easterbrook.\n\n.. include:: ../../../INSTALL.rst\n   :end-before: .. _README\n\n.. _README.rst:   readme.html\n</code></pre>"},{"location":"ai/exiv2/#file-srcdocmiscreadmerst","title":"File: src/doc/misc/readme.rst","text":"<pre><code>.. This is part of the python-exiv2 documentation.\n   Copyright (C)  2024  Jim Easterbrook.\n\nProject overview\n================\n\n.. include:: ../../../README.rst\n   :start-line: 2\n   :end-before: .. _INSTALL\n\n.. _INSTALL.rst: install.html\n.. _USAGE.rst:   usage.html\n</code></pre>"},{"location":"ai/exiv2/#file-srcdocmiscusagerst","title":"File: src/doc/misc/usage.rst","text":"<pre><code>.. This is part of the python-exiv2 documentation.\n   Copyright (C)  2024  Jim Easterbrook.\n\n.. include:: ../../../USAGE.rst\n</code></pre>"},{"location":"ai/exiv2/#file-srcdocindexrst","title":"File: src/doc/index.rst","text":"<pre><code>.. This is part of the python-exiv2 documentation.\n   Copyright (C)  2024  Jim Easterbrook.\n\nPython-exiv2 documentation\n==========================\n\n\n.. toctree::\n   :maxdepth: 2\n\n   misc/readme\n   misc/install\n   misc/usage\n   misc/changelog\n   misc/api\n</code></pre>"},{"location":"ai/exiv2/#file-installrst","title":"File: INSTALL.rst","text":"<pre><code>Installation\n============\n\nAs mentioned in `README.rst`_, on most computers `python-exiv2`_ can be installed with a simple pip_ command::\n\n    C:\\&gt;pip install exiv2\n    Collecting exiv2\n      Downloading exiv2-0.17.0-cp38-cp38-win_amd64.whl.metadata (7.3 kB)\n    Downloading exiv2-0.17.0-cp38-cp38-win_amd64.whl (8.5 MB)\n       ---------------------------------------- 8.5/8.5 MB 963.3 kB/s eta 0:00:00\n    Installing collected packages: exiv2\n    Successfully installed exiv2-0.17.0\n\nIf this doesn't work, or you need a non-standard installation, there are other ways to install `python-exiv2`_.\n\n.. contents::\n    :backlinks: top\n\nUse installed libexiv2\n----------------------\n\nIn the example above, pip_ installs a \"binary wheel_\".\nThis is pre-compiled and includes a copy of the libexiv2_ library, which makes installation quick and easy.\nWheels for `python-exiv2`_ are available for Windows, Linux, and MacOS with Python versions from 3.6 to 3.12.\n\nIf your computer already has libexiv2_ installed (typically by your operating system's \"package manager\") then pip_ might be able to compile `python-exiv2`_ to use it.\nFirst you need to check what version of python-exiv2 you have::\n\n    $ pkg-config --modversion exiv2\n    0.27.5\n\nIf this command fails it might be because you don't have the \"development headers\" of libexiv2_ installed.\nOn some operating systems these are a separate package, with a name like ``exiv2-dev``.\n\nIf the ``pkg-config`` command worked, and your version of libexiv2 is 0.27.0 or later, then you should be able to install `python-exiv2`_ from source::\n\n    $ pip3 install --user exiv2 --no-binary :all:\n    Collecting exiv2\n      Downloading exiv2-0.17.0.tar.gz (1.6 MB)\n         \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 1.6/1.6 MB 870.6 kB/s eta 0:00:00\n      Installing build dependencies ... done\n      Getting requirements to build wheel ... done\n      Installing backend dependencies ... done\n      Preparing metadata (pyproject.toml) ... done\n    Building wheels for collected packages: exiv2\n      Building wheel for exiv2 (pyproject.toml) ... done\n      Created wheel for exiv2: filename=exiv2-0.17.0-cp310-cp310-linux_x86_64.whl size=4586091 sha256=09d7f0d2a3654c1cf4bb944ed04d594a92e6f6eaa8a1a0acd5fa45cdf8746ffd\n      Stored in directory: /home/jim/.cache/pip/wheels/e5/18/69/fc2199ac2c24b13e88a56c4660720fea109d69b0747e05eb1d\n    Successfully built exiv2\n    Installing collected packages: exiv2\n    Successfully installed exiv2-0.17.0\n\nThis will take some time as python-exiv2 has to be compiled, and some of its modules are quite large.\nIf you want to see what's happening you can use the ``-v`` option to increase pip_'s verbosity.\n\nIf you change your installed libexiv2_, for example as part of an operating system update, then your installation of python-exiv2 will probably stop working.\nIf this happens you need to reinstall python-exiv2 to use the new version of libexiv2::\n\n    $ pip3 install --user exiv2 --no-binary :all: --force-reinstall\n\nNote the use of ``--force-reinstall`` to make pip reinstall python-exiv2 even if the latest version is already installed.\n\nDownload python-exiv2 source\n----------------------------\n\nThe following installation procedures all require access to the `python-exiv2`_ source code.\nYou can download this from GitHub_ (use the most recent release) or, if you are familiar with git_, you could \"clone\" the GitHub repo.\nThe rest of this document assumes you have the source code and are in your ``python-exiv2`` directory.\n\nYou may also need to install the wheel package used to build Python wheels::\n\n    $ pip3 install --user wheel\n\nUse pre-built libexiv2\n----------------------\n\nThe Exiv2 project provides builds_ for several operating systems.\nDownload and unpack the appropriate one for your operating system, then you can compile `python-exiv2`_ to use this source.\nNote the use of the ``EXIV2_ROOT`` environment variable to select the source::\n\n    $ EXIV2_ROOT=../exiv2-0.28.3-Linux64/ pip3 wheel .\n    Processing /home/jim/python-exiv2\n      Installing build dependencies ... done\n      Getting requirements to build wheel ... done\n      Installing backend dependencies ... done\n      Preparing metadata (pyproject.toml) ... done\n    Building wheels for collected packages: exiv2\n      Building wheel for exiv2 (pyproject.toml) ... done\n      Created wheel for exiv2: filename=exiv2-0.17.0-cp310-cp310-linux_x86_64.whl size=11839757 sha256=a7de01eadbf9bf608ff07cda506db1453fcb91c9b55cc9d5cbc93546ee6c52c7\n      Stored in directory: /home/jim/.cache/pip/wheels/b6/c0/a3/68cf7238e1b7de98ca8bbce0f5f3f0bf6b85f9b6468a097cca\n    Successfully built exiv2\n\nAs before, you can use pip_'s ``-v`` option to see what's happening as it compiles each python-exiv2 module.\n\nIf this worked you can now install the wheel_ you've just built::\n\n    $ pip3 install --user exiv2-0.17.0-cp310-cp310-linux_x86_64.whl\n    Processing ./exiv2-0.17.0-cp310-cp310-linux_x86_64.whl\n    Installing collected packages: exiv2\n    Successfully installed exiv2-0.17.0\n\nWindows\n^^^^^^^\n\nThe above instructions apply to Unix-like systems such as Linux, MacOS, and MinGW.\nHowever, it is also possible to build `python-exiv2`_ on Windows.\nThere is a lot of confusing and contradictory information available about building Python extensions on Windows.\nThe following is what has worked for me.\n\nFirst you need to install a compiler.\nPython versions 3.5 onwards need Visual C++ 14.x.\nFortunately Microsoft provides a free `Visual C++ 14.2 standalone`_.\nDownload and install this first.\n\nBuild a wheel::\n\n    C:\\Users\\Jim\\python-exiv2&gt;set EXIV2_ROOT=..\\exiv2-0.28.3-2019msvc64\n\n    C:\\Users\\Jim\\python-exiv2&gt;pip wheel .\n    Processing c:\\users\\jim\\python-exiv2\n      Installing build dependencies ... done\n      Getting requirements to build wheel ... done\n      Preparing metadata (pyproject.toml) ... done\n    Building wheels for collected packages: exiv2\n      Building wheel for exiv2 (pyproject.toml) ... done\n      Created wheel for exiv2: filename=exiv2-0.17.0-cp38-cp38-win_amd64.whl size=8448722 sha256=0408f9c99a1ca772dc62ec6689dc6ce8dd8d7027d7cb8808a91e8312590c498d\n      Stored in directory: c:\\users\\jim\\appdata\\local\\pip\\cache\\wheels\\a3\\3b\\d4\\d35463afd5940a14f17983a106ed52ffafc07877192bcc881a\n    Successfully built exiv2\n\nInstall the wheel::\n\n    C:\\Users\\Jim\\python-exiv2&gt;pip install exiv2-0.17.0-cp38-cp38-win_amd64.whl\n    Processing c:\\users\\jim\\python-exiv2\\exiv2-0.17.0-cp38-cp38-win_amd64.whl\n    Installing collected packages: exiv2\n    Successfully installed exiv2-0.17.0\n\nBuild your own libexiv2\n-----------------------\n\nIn some circumstances a pre-built libexiv2_ supplied by the exiv2 project may not be suitable.\nFor example, the Linux build might use newer libraries than are installed on your computer.\n\nBuilding libexiv2 requires CMake_.\nThis should be available from your operating system's package manager.\nIf not (e.g. on Windows) then download an installer from the CMake web site.\nYou will also need to install the \"development headers\" of zlib_ and expat_.\nExiv2 provides some `build instructions`_, but I don't follow them exactly.\n\nDownload and unpack the exiv2 source, then change to its directory.\nThen configure the build::\n\n    $ cmake --preset linux-release -D CONAN_AUTO_INSTALL=OFF \\\n    &gt; -D EXIV2_BUILD_SAMPLES=OFF -D EXIV2_BUILD_UNIT_TESTS=OFF \\\n    &gt; -D EXIV2_BUILD_EXIV2_COMMAND=OFF -D EXIV2_ENABLE_NLS=ON\n\n(The cmake options enable localisation and turn off building bits we don't need.)\n\nIf this worked you can now compile and install (to the local folder) libexiv2::\n\n    $ cmake --build build-linux-release --config Release\n    $ cmake --install build-linux-release --config Release\n\nBack in your python-exiv2 directory, you can build the wheel as before, but using your new build::\n\n    $ EXIV2_ROOT=../exiv2-0.28.3/build-linux-release/install pip3 wheel .\n    Processing /home/jim/python-exiv2\n      Installing build dependencies ... done\n      Getting requirements to build wheel ... done\n      Installing backend dependencies ... done\n      Preparing metadata (pyproject.toml) ... done\n    Building wheels for collected packages: exiv2\n      Building wheel for exiv2 (pyproject.toml) ... done\n      Created wheel for exiv2: filename=exiv2-0.17.0-cp310-cp310-linux_x86_64.whl size=11979058 sha256=85cf8d78bd8d6b82de6aae6fd8bb58ffb76a381cc921bc1bd77fbfb77e46e2dc\n      Stored in directory: /home/jim/.cache/pip/wheels/b6/c0/a3/68cf7238e1b7de98ca8bbce0f5f3f0bf6b85f9b6468a097cca\n    Successfully built exiv2\n\nThen install the wheel as before.\n\nWindows\n^^^^^^^\n\nOnce again, doing this on Windows is just a bit more complicated.\n\nThe dependencies zlib_, expat_, and libiconv_ are installed with conan_.\nFirst install conan with pip_::\n\n    C:\\Users\\Jim\\exiv2-0.28.3&gt;pip install conan==1.59.0\n\nThen configure CMake::\n\n    C:\\Users\\Jim\\exiv2-0.28.3&gt;cmake --preset msvc -D CMAKE_BUILD_TYPE=Release ^\n    More? -D EXIV2_BUILD_SAMPLES=OFF -D EXIV2_BUILD_EXIV2_COMMAND=OFF ^\n    More? -D EXIV2_BUILD_UNIT_TESTS=OFF -G \"Visual Studio 16 2019\"\n\n(The ``^`` characters are used to split this very long command.)\n\nIf that worked you can compile and install libexiv2::\n\n    C:\\Users\\Jim\\exiv2-0.28.3&gt;cmake --build build-msvc --config Release\n\n    C:\\Users\\Jim\\exiv2-0.28.3&gt;cmake --install build-msvc --config Release\n\nBack in your python-exiv2 directory, build a wheel using your newly compiled libexiv2::\n\n    C:\\Users\\Jim\\python-exiv2&gt;set EXIV2_ROOT=..\\exiv2-0.28.3\\build-msvc\\install\n\n    C:\\Users\\Jim\\python-exiv2&gt;pip wheel .\n    Processing c:\\users\\jim\\python-exiv2\n      Installing build dependencies ... done\n      Getting requirements to build wheel ... done\n      Preparing metadata (pyproject.toml) ... done\n    Building wheels for collected packages: exiv2\n      Building wheel for exiv2 (pyproject.toml) ... done\n      Created wheel for exiv2: filename=exiv2-0.17.0-cp38-cp38-win_amd64.whl size=8428068 sha256=c9c1364c0aaddb1455b2272cbd9ee64bc22d290f13eb7dc289b2ee67dcda87f3\n      Stored in directory: c:\\users\\jim\\appdata\\local\\pip\\cache\\wheels\\a3\\3b\\d4\\d35463afd5940a14f17983a106ed52ffafc07877192bcc881a\n    Successfully built exiv2\n\nThen install the wheel as before.\n\nRunning SWIG\n------------\n\nYou should only need to run SWIG_ if your installed libexiv2 has extras, such as Windows Unicode paths, that aren't available with the SWIG generated files included with python-exiv2.\nNote that SWIG version 4.1.0 or later is required to process the highly complex libexiv2 header files.\n\nThe ``build_swig.py`` script has one required parameter - the path of the exiv2 include directory.\nIf you've downloaded or build exiv2 you can run ``build_swig.py`` on the local copy::\n\n    $ python3 utils/build_swig.py ../exiv2-0.28.3/build-linux-release/install/include/\n\nOr you can run it on the system installed libexiv2::\n\n    $ python3 utils/build_swig.py /usr/include\n\nAfter running ``build_swig.py`` you can build and install a wheel as before::\n\n    $ EXIV2_ROOT=../exiv2-0.28.3/build-linux-release/install pip3 wheel .\n    $ pip3 install --user exiv2-0.17.0-cp310-cp310-linux_x86_64.whl\n\n.. _build instructions:\n    https://github.com/exiv2/exiv2#2\n.. _builds:       https://www.exiv2.org/download.html\n.. _CMake:        https://cmake.org/\n.. _conan:        https://conan.io/\n.. _expat:        https://libexpat.github.io/\n.. _git:          https://git-scm.com/\n.. _GitHub:       https://github.com/jim-easterbrook/python-exiv2/releases\n.. _libexiv2:     https://www.exiv2.org/getting-started.html\n.. _libiconv:     https://www.gnu.org/software/libiconv/\n.. _pip:          https://pip.pypa.io/\n.. _python-exiv2: https://github.com/jim-easterbrook/python-exiv2\n.. _SWIG:         http://www.swig.org/\n.. _Visual C++ 14.2 standalone:\n    https://visualstudio.microsoft.com/downloads/#build-tools-for-visual-studio-2019\n.. _wheel:        https://www.python.org/dev/peps/pep-0427/\n.. _zlib:         https://zlib.net/\n.. _README.rst:   README.rst\n</code></pre>"},{"location":"ai/exiv2/#file-readmerst","title":"File: README.rst","text":"<pre><code>python-exiv2 v\\ 0.17.3\n======================\n\npython-exiv2 is a low level interface (or binding) to the exiv2_ C++ library.\nIt is built using SWIG_ to automatically generate the interface code.\nThe intention is to give direct access to all of the top-level classes in libexiv2_, but with additional \"Pythonic\" helpers where necessary.\nNot everything in libexiv2 is available in the Python interface.\nIf you need something that's not there, please let me know.\n\n.. note::\n    This project has taken over the PyPI exiv2 package created by Michael Vanslembrouck.\n    If you need to use Michael's project, it is available at https://bitbucket.org/zmic/exiv2-python/src/master/ and can be installed with pip_::\n\n        pip install exiv2==0.3.1\n\n.. contents::\n    :backlinks: top\n\nIntroduction\n------------\n\nThere are several other ways to access libexiv2_ from within Python.\nThe first one I used was `pyexiv2 (old)`_.\nAfter its development ceased I moved on to using gexiv2_ and PyGObject_.\nThis works well, providing a ``Metadata`` object with high level functions such as ``set_tag_string`` and ``set_tag_multiple`` to get and set metadata values.\n\nA more recent development is `pyexiv2 (new)`_.\nThis new project is potentially very useful, providing a simple interface with functions to read and modify metadata using Python ``dict`` parameters.\n\nFor more complicated metadata operations I think a lower level interface is required, which is where this project comes in.\nHere is an example of its use:\n\n.. code:: python\n\n    Python 3.6.12 (default, Dec 02 2020, 09:44:23) [GCC] on linux\n    Type \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n    &gt;&gt;&gt; import exiv2\n    &gt;&gt;&gt; image = exiv2.ImageFactory.open('IMG_0211.JPG')\n    &gt;&gt;&gt; image.readMetadata()\n    &gt;&gt;&gt; data = image.exifData()\n    &gt;&gt;&gt; data['Exif.Image.Artist'].print()\n    'Jim Easterbrook'\n    &gt;&gt;&gt;\n\nPlease see `USAGE.rst`_ for more help with using the Python interface to libexiv2.\n\nTransition to libexiv2 v0.28.x\n------------------------------\n\nBefore python-exiv2 v0.16 the \"binary wheels\" available from PyPI_ incorporated libexiv2 v0.27.7 or earlier.\nBinary wheels for python-exiv2 v0.16.3 incorporate libexiv2 v0.28.2, and those for python-exiv2 v0.16.2 incorporate libexiv2 v0.27.7.\nBinary wheels for python-exiv2 v0.17.0 incorporate libexiv2 v0.28.3.\nIf your software is currently incompatible with libexiv2 v0.28.x you can use the older version of libexiv2 by explicitly installing python-exiv2 v0.16.2::\n\n    $ pip install --user exiv2==0.16.2\n\nThere are some changes in the libexiv2 API between v0.27.7 and v0.28.x.\nFuture versions of python-exiv2 will all incorporate libexiv2 v0.28.x, so please update your software to use the changed API.\n\nDocumentation\n-------------\n\nThe libexiv2_ library is well documented for C++ users, in Doxygen_ format.\nRecent versions of SWIG_ can convert this documentation to pydoc_ format in the Python interface::\n\n    $ pydoc3 exiv2.Image.readMetadata\n    Help on method_descriptor in exiv2.Image:\n\n    exiv2.Image.readMetadata = readMetadata(...)\n        Read all metadata supported by a specific image format from the\n            image. Before this method is called, the image metadata will be\n            cleared.\n\n        This method returns success even if no metadata is found in the\n        image. Callers must therefore check the size of individual metadata\n        types before accessing the data.\n\n        :raises: Error if opening or reading of the file fails or the image\n                data is not valid (does not look like data of the specific image\n                type).\n\nThis is then converted to web pages by Sphinx_ and hosted on ReadTheDocs_.\n\nUnfortunately some documentation gets lost in the manipulations needed to make a useful interface.\nThe C++ documentation is still needed in these cases.\n\nSupport for bmff files (e.g. CR3, HEIF, HEIC, AVIF, JPEG XL)\n------------------------------------------------------------\n\nPython-exiv2 from version 0.17.0 has support for BMFF files enabled by default if libexiv2 was compiled with support for BMFF files enabled.\nIn earlier versions you need to call the ``enableBMFF`` function before using BMFF files in your program.\nUse of BMFF files may infringe patents.\nPlease read the Exiv2 `statement on BMFF`_ patents before doing so.\n\nInstallation\n------------\n\nPython \"binary wheels\" are available for Windows, Linux, and MacOS.\nThese include the libexiv2 library and should not need any other software to be installed.\nThey can be installed with Python's pip_ package.\nFor example, on Windows::\n\n    C:\\Users\\Jim&gt;pip install exiv2\n\nor on Linux or MacOS::\n\n    $ pip3 install --user exiv2\n\nIf the available wheels are not compatible with your operating system or Python version then pip will download the python-exiv2 source and attempt to compile it.\nFor more information, and details of how to compile python-exiv2 and libexiv2, see `INSTALL.rst`_.\n\nProblems?\n---------\n\nPlease email jim@jim-easterbrook.me.uk if you find any problems (or solutions!).\n\n.. _Doxygen:           https://www.doxygen.nl/\n.. _exiv2:             https://www.exiv2.org/getting-started.html\n.. _gexiv2:            https://wiki.gnome.org/Projects/gexiv2\n.. _GitHub:            https://github.com/jim-easterbrook/python-exiv2\n.. _libexiv2:          https://www.exiv2.org/doc/index.html\n.. _pip:               https://pip.pypa.io/\n.. _pyexiv2 (new):     https://github.com/LeoHsiao1/pyexiv2\n.. _pyexiv2 (old):     https://launchpad.net/pyexiv2\n.. _PyGObject:         https://pygobject.readthedocs.io/en/latest/\n.. _PyPI:              https://pypi.org/project/exiv2/\n.. _SWIG:              http://swig.org/\n.. _pydoc:             https://docs.python.org/3/library/pydoc.html\n.. _Python3:           https://www.python.org/\n.. _ReadTheDocs:       https://python-exiv2.readthedocs.io/\n.. _Sphinx:            https://www.sphinx-doc.org/\n.. _statement on BMFF: https://github.com/exiv2/exiv2#BMFF\n.. _Visual C++:        https://wiki.python.org/moin/WindowsCompilers\n.. _INSTALL.rst:       INSTALL.rst\n.. _USAGE.rst:         USAGE.rst\n</code></pre>"},{"location":"ai/exiv2/#file-usagerst","title":"File: USAGE.rst","text":"<pre><code>Hints and tips\n==============\n\nHere are some ideas on how to use python-exiv2.\nIn many cases there's more than one way to do it, but some ways are more \"Pythonic\" than others.\nSome of this is only applicable to python-exiv2 v0.16.0 onwards.\nYou can find out what version of python-exiv2 you have with either ``pip3 show exiv2`` or ``python3 -m exiv2``.\n\n.. contents::\n    :backlinks: top\n\nlibexiv2 library version\n------------------------\n\nPython-exiv2 can be used with any version of libexiv2 from 0.27.0 onwards.\nThe \"binary wheels\" available from PyPI_ currently include a copy of libexiv2 v0.27.7, but if you install from source then python-exiv2 will use whichever version of libexiv2 is installed on your computer.\n\nThere are some differences in the API of libexiv2 v0.28.x and v0.27.y.\nSome of these have been \"backported\" in the Python interface so you can start using the v0.28 methods, e.g. the ``exiv2.DataBuf.data()`` function replaces the ``exiv2.DataBuf.pData_`` attribute.\n\nIf you need to write software that works with both versions of libexiv2 then the ``exiv2.testVersion`` function can be used to test for version 0.28.0 onwards:\n\n.. code:: python\n\n    if exiv2.testVersion(0, 28, 0):\n        int_val = datum.toInt64(0)\n    else:\n        int_val = datum.toLong(0)\n\nError handling\n--------------\n\nlibexiv2_ has a multilevel warning system a bit like Python's standard logger.\nThe Python interface redirects all Exiv2 messages to Python logging with an appropriate log level.\nThe ``exiv2.LogMsg.setLevel()`` method can be used to control what severity of messages are logged.\n\nSince python-exiv2 v0.16.2 the ``exiv2.LogMsg.setHandler()`` method can be used to set the handler.\nThe Python logging handler is ``exiv2.LogMsg.pythonHandler`` and the Exiv2 default handler is ``exiv2.LogMsg.defaultHandler``.\n\nNULL values\n-----------\n\nSome libexiv2_ functions that expect a pointer to an object or data can have ``NULL`` (sometimes documented as ``0``) passed to them to represent \"no value\".\nIn Python ``None`` is used instead.\n\nDeprecation warnings\n--------------------\n\nAs python-exiv2 is being developed better ways are being found to do some things.\nSome parts of the interface are deprecated and will eventually be removed.\nPlease use Python's ``-Wd`` flag when testing your software to ensure it isn't using deprecated features.\n(Do let me know if I've deprecated a feature you need and can't replace with an alternative.)\n\nEnums\n-----\n\nThe C++ libexiv2 library often uses ``enum`` classes to list related data, such as the value type identifiers stored in `Exiv2::TypeId`_.\nSWIG's default processing of such enums is to add all the values as named constants to the top level of the module, e.g. ``exiv2.asciiString``.\nIn python-exiv2 most of the C++ enums are represented by Python enum_ classes, e.g. ``exiv2.TypeId.asciiString`` is a member of ``exiv2.TypeId``.\n\nUnfortunately there is no easy way to deprecate the SWIG generated top level constants, but they will eventually be removed from python-exiv2.\nPlease ensure you only use the enum classes in your use of python-exiv2.\n\nData structures\n---------------\n\nSome parts of the Exiv2 API use structures to hold several related data items.\nFor example, the `Exiv2::ExifTags`_ class has a ``tagList()`` method that returns a list of `Exiv2::TagInfo`_ structs.\nIn python-exiv2 (since v0.16.2) these structs have dict_ like behaviour, so the members can be accessed more easily:\n\n.. code:: python\n\n    &gt;&gt;&gt; import exiv2\n    &gt;&gt;&gt; info = exiv2.ExifTags.tagList('Image')[0]\n    &gt;&gt;&gt; print(info.title_)\n    Processing Software\n    &gt;&gt;&gt; print(info['title'])\n    Processing Software\n    &gt;&gt;&gt; print(info.keys())\n    ['tag', 'title', 'sectionId', 'desc', 'typeId', 'ifdId', 'count', 'name']\n    &gt;&gt;&gt; from pprint import pprint\n    &gt;&gt;&gt; pprint(dict(info))\n    {'count': 0,\n     'desc': 'The name and version of the software used to post-process the '\n             'picture.',\n     'ifdId': &lt;IfdId.ifd0Id: 1&gt;,\n     'name': 'ProcessingSoftware',\n     'sectionId': &lt;SectionId.otherTags: 4&gt;,\n     'tag': 11,\n     'title': 'Processing Software',\n     'typeId': &lt;TypeId.asciiString: 2&gt;}\n\nNote that struct member names ending with an underscore have the underscore removed in the dict_ like interface.\n\nReading data values\n-------------------\n\nExiv2 stores metadata as (key, value) pairs in `Exiv2::Metadatum`_ objects.\nThe datum has two methods to retrieve the value: ``value()`` and ``getValue()``.\nThe first gets a reference to the value and the second makes a copy.\nUse ``value()`` when you don't need to modify the data.\n``getValue()`` copies the data to a new object that you can modify.\n\nIn the C++ API these methods both return (a pointer to) an `Exiv2::Value`_ base class object.\nThe Python interface uses the value's ``typeId()`` method to determine its type and casts the return value to the appropriate derived type.\n\nRecasting data values\n^^^^^^^^^^^^^^^^^^^^^\n\nIn earlier versions of python-gphoto2 you could set the type of value returned by ``value()`` or ``getValue()`` by passing an ``exiv2.TypeId`` parameter:\n\n.. code:: python\n\n    datum = exifData['Exif.Photo.UserComment']\n    value = datum.value(exiv2.TypeId.comment)\n    result = value.comment()\n\nSince version 0.16.0 the returned value is always of the correct type and this parameter is ignored.\n\nWriting data values\n-------------------\n\nThe simplest way to set metadata is by assigning a value to the metadatum:\n\n.. code:: python\n\n    exifData['Exif.Image.ImageDescription'] = 'Uncle Fred at the seaside'\n    iptcData['Iptc.Application2.Caption'] = 'Uncle Fred at the seaside'\n    xmpData['Xmp.dc.description'] = 'Uncle Fred at the seaside'\n\nThe datum is created if it doesn't already exist and its value is set to the text.\n\nSetting the type\n^^^^^^^^^^^^^^^^\n\nMetadata values have a type, for example Exif values can be ``Ascii``, ``Short``, ``Rational`` etc.\nWhen a datum is created its type is set to the default for the key, so ``exifData['Exif.Image.ImageDescription']`` is set to ``Ascii``.\nIf a datum already exists, its current type is not changed by assigning a string value.\n\nIf you need to force the type of a datum (e.g. because it currently has the wrong type) you can create a value of the correct type and assign it:\n\n.. code:: python\n\n    exifData['Exif.Image.ImageDescription'] = exiv2.AsciiValue('Uncle Fred at the seaside')\n\nNumerical data\n^^^^^^^^^^^^^^\n\nSetting string values as above is OK for text data such as Exif's Ascii or XMP's XmpText, but less suitable for numeric data such as GPS coordinates.\nThese can be set from a string, but it is better to use numeric data:\n\n.. code:: python\n\n    exifData['Exif.GPSInfo.GPSLatitude'] = '51/1 30/1 4910/1000'\n    exifData['Exif.GPSInfo.GPSLatitude'] = ((51, 1), (30, 1), (4910, 1000))\n\nIn the first line the exiv2 library converts the string ``'51/1 30/1 4910/1000'`` to three (numerator, denominator) pairs.\nIn the second line the three pairs are supplied as integer numbers and no conversion is needed.\nThis is potentially quicker and more accurate.\n(The Python Fraction_ type is very useful for dealing with rational numbers like these.)\n\nStructured data\n^^^^^^^^^^^^^^^\n\nSome XMP data is more complicated to deal with.\nFor example, the locations shown in a photograph can be stored as a group of structures, each containing location/city/country information.\nExiv2 gives these complex tag names like ``Xmp.iptcExt.LocationShown[1]/Iptc4xmpExt:City``.\n\nData like this is written in several stages.\nFirst create the array ``Xmp.iptcExt.LocationShown``:\n\n.. code:: python\n\n    tmp = exiv2.XmpTextValue()\n    tmp.setXmpArrayType(exiv2.XmpValue.XmpArrayType.xaBag)\n    xmpData['Xmp.iptcExt.LocationShown'] = tmp\n\nThen create a structured data container for the first element in the array:\n\n.. code:: python\n\n    tmp = exiv2.XmpTextValue()\n    tmp.setXmpStruct()\n    xmpData['Xmp.iptcExt.LocationShown[1]'] = tmp\n\nThen write individual items in the structure:\n\n.. code:: python\n\n    xmpData['Xmp.iptcExt.LocationShown[1]/Iptc4xmpExt:City'] = 'London'\n    xmpData['Xmp.iptcExt.LocationShown[1]/Iptc4xmpExt:Sublocation'] = 'Buckingham Palace'\n\nThis can potentially be nested to any depth.\n\nExiv2::ValueType&lt; T &gt;\n---------------------\n\nExiv2 uses a template class `Exiv2::ValueType&lt; T &gt;`_ to store Exif numerical values such as the unsigned rationals used for GPS coordinates.\nThis class stores the actual data in a ``std::vector`` attribute ``value_``.\nIn the Python interface this attribute is hidden and the data is accessed by indexing:\n\n.. code:: python\n\n    datum = exifData['Exif.GPSInfo.GPSLatitude']\n    value = datum.getValue()\n    print(value[0])\n    value[0] = (47, 1)\n\nPython read access to the data can be simplified by using it to initialise a list or tuple:\n\n.. code:: python\n\n    datum = exifData['Exif.GPSInfo.GPSLatitude']\n    value = list(datum.value())\n\nYou can also construct new values from a Python list or tuple:\n\n.. code:: python\n\n    value = exiv2.URationalValue([(47, 1), (49, 1), (31822, 1000)])\n    exifData['Exif.GPSInfo.GPSLatitude'] = value\n\nString values\n^^^^^^^^^^^^^\n\nIf you don't want to use the data numerically then you can just use strings for everything:\n\n.. code:: python\n\n    datum = exifData['Exif.GPSInfo.GPSLatitude']\n    value = str(datum.value())\n    exifData['Exif.GPSInfo.GPSLatitude'] = '47/1 49/1 31822/1000'\n\nIterators\n---------\n\nThe ``Exiv2::ExifData``, ``Exiv2::IptcData``, and ``Exiv2::XmpData`` classes use C++ iterators to expose private data, for example the ``ExifData`` class has a private member of ``std::list&lt;Exifdatum&gt;`` type.\nThe classes have public ``begin()``, ``end()``, and ``findKey()`` methods that return ``std::list`` iterators.\nIn C++ you can dereference one of these iterators to access the ``Exifdatum`` object, but Python doesn't have a dereference operator.\n\nThis Python interface converts the ``std::list`` iterator to a Python object that has access to all the ``Exifdatum`` object's methods without dereferencing.\nFor example:\n\n.. code:: python\n\n    Python 3.6.12 (default, Dec 02 2020, 09:44:23) [GCC] on linux\n    Type \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n    &gt;&gt;&gt; import exiv2\n    &gt;&gt;&gt; image = exiv2.ImageFactory.open('IMG_0211.JPG')\n    &gt;&gt;&gt; image.readMetadata()\n    &gt;&gt;&gt; data = image.exifData()\n    &gt;&gt;&gt; b = data.begin()\n    &gt;&gt;&gt; b.key()\n    'Exif.Image.ProcessingSoftware'\n    &gt;&gt;&gt;\n\nBefore using an iterator you must ensure that it is not equal to the ``end()`` value.\n\nYou can iterate over the data in a very C++ like style:\n\n.. code:: python\n\n    &gt;&gt;&gt; data = image.exifData()\n    &gt;&gt;&gt; b = data.begin()\n    &gt;&gt;&gt; e = data.end()\n    &gt;&gt;&gt; while b != e:\n    ...     b.key()\n    ...     next(b)\n    ...\n    'Exif.Image.ProcessingSoftware'\n    &lt;Swig Object of type 'Exiv2::Exifdatum *' at 0x7fd6053f9030&gt;\n    'Exif.Image.ImageDescription'\n    &lt;Swig Object of type 'Exiv2::Exifdatum *' at 0x7fd6053f9030&gt;\n    [skip 227 line pairs]\n    'Exif.Thumbnail.JPEGInterchangeFormat'\n    &lt;Swig Object of type 'Exiv2::Exifdatum *' at 0x7fd6053f9030&gt;\n    'Exif.Thumbnail.JPEGInterchangeFormatLength'\n    &lt;Swig Object of type 'Exiv2::Exifdatum *' at 0x7fd6053f9030&gt;\n    &gt;&gt;&gt;\n\nThe ``&lt;Swig Object of type 'Exiv2::Exifdatum *' at 0x7fd6053f9030&gt;`` lines are the Python interpreter showing the return value of ``next(b)``.\nYou can also iterate in a more Pythonic style:\n\n.. code:: python\n\n    &gt;&gt;&gt; data = image.exifData()\n    &gt;&gt;&gt; for datum in data:\n    ...     datum.key()\n    ...\n    'Exif.Image.ProcessingSoftware'\n    'Exif.Image.ImageDescription'\n    [skip 227 lines]\n    'Exif.Thumbnail.JPEGInterchangeFormat'\n    'Exif.Thumbnail.JPEGInterchangeFormatLength'\n    &gt;&gt;&gt;\n\nThe data container classes are like a cross between a Python list_ of ``Metadatum`` objects and a Python dict_ of ``(key, Value)`` pairs.\n(One way in which they are not like a dict_ is that you can have more than one member with the same key.)\nThis allows them to be used in a very Pythonic style:\n\n.. code:: python\n\n    data = image.exifData()\n    print(data['Exif.Image.ImageDescription'].toString())\n    if 'Exif.Image.ProcessingSoftware' in data:\n        del data['Exif.Image.ProcessingSoftware']\n    data = image.iptcData()\n    while 'Iptc.Application2.Keywords' in data:\n        del data['Iptc.Application2.Keywords']\n\nWarning: segmentation faults\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nIf an iterator is invalidated, e.g. by deleting the datum it points to, then your Python program may crash with a segmentation fault if you try to use the invalid iterator.\nJust as in C++, there is no way to detect that an iterator has become invalid.\n\nSegmentation faults\n-------------------\n\nThere are many places in the libexiv2 C++ API where objects hold references to data in other objects.\nThis is more efficient than copying the data, but can cause segmentation faults if an object is deleted while another objects refers to its data.\n\nThe Python interface tries to protect the user from this but in some cases this is not possible.\nFor example, an `Exiv2::Metadatum`_ object holds a reference to data that can easily be invalidated:\n\n.. code:: python\n\n    exifData = image.exifData()\n    datum = exifData['Exif.GPSInfo.GPSLatitude']\n    print(str(datum.value()))                       # no problem\n    del exifData['Exif.GPSInfo.GPSLatitude']\n    print(str(datum.value()))                       # segfault!\n\nSegmentation faults are also easily caused by careless use of iterators or memory blocks, as discussed below.\nThere may be other cases where the Python interface doesn't prevent segfaults.\nPlease let me know if you find any.\n\nBinary data input\n-----------------\n\nSome libexiv2 functions, e.g. `Exiv2::ExifThumb::setJpegThumbnail`_, have an ``Exiv2::byte*`` parameter and a length parameter.\nIn python-exiv2 these are replaced by a single `bytes-like object`_ parameter that can be any Python object that exposes a simple `buffer interface`_, e.g. bytes_, bytearray_, memoryview_:\n\n.. code:: python\n\n    # Use Python imaging library to make a small JPEG image\n    pil_im = PIL.Image.open('IMG_9999.JPG')\n    pil_im.thumbnail((160, 120), PIL.Image.ANTIALIAS)\n    data = io.BytesIO()\n    pil_im.save(data, 'JPEG')\n    # Set image thumbnail to small JPEG image\n    thumb = exiv2.ExifThumb(image.exifData())\n    thumb.setJpegThumbnail(data.getbuffer())\n\nBinary data output\n------------------\n\nSome libexiv2 functions, e.g. `Exiv2::DataBuf::data`_, return ``Exiv2::byte*``, a pointer to a block of memory.\nIn python-exiv2 from v0.15.0 onwards this is converted directly to a Python memoryview_ object.\nThis allows direct access to the block of memory without unnecessary copying.\nIn some cases this includes writing to the data.\n\n.. code:: python\n\n    thumb = exiv2.ExifThumb(image.exifData())\n    buf = thumb.copy()\n    thumb_im = PIL.Image.open(io.BytesIO(buf.data()))\n\nIn python-exiv2 before v0.15.0 the memory block is converted to an object with a buffer interface.\nA Python memoryview_ can be used to access the data without copying.\n(Converting to bytes_ would make a copy of the data, which we don't usually want.)\n\nWarning: segmentation faults\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nNote that the memory block must not be deleted or resized while the memoryview exists.\nDoing so will invalidate the memoryview and may cause a segmentation fault:\n\n.. code:: python\n\n    buf = exiv2.DataBuf(b'fred')\n    data = buf.data()\n    print(bytes(data))              # Prints b'fred'\n    buf.alloc(128)\n    print(bytes(data))              # Prints random values, may segfault\n\nBuffer interface\n----------------\n\nThe ``Exiv2::DataBuf``, ``Exiv2::PreviewImage``, and ``Exiv2::BasicIO`` classes are all wrappers around a potentially large block of memory.\nThey each have methods to access that memory without copying, such as ``Exiv2::DataBuf::data()`` and ``Exiv2::BasicIo::mmap()`` but in Python these classes also expose a `buffer interface`_. This allows them to be used almost anywhere that a `bytes-like object`_ is expected.\n\nFor example, you could save a photograph's thumbnail in a separate file like this:\n\n.. code:: python\n\n    thumb = exiv2.ExifThumb(image.exifData())\n    with open('thumbnail.jpg', 'wb') as out_file:\n        out_file.write(thumb.copy())\n\nImage data in memory\n--------------------\n\nThe `Exiv2::ImageFactory`_ class has a method ``open(const byte *data, size_t size)`` to create an `Exiv2::Image`_ from data stored in memory, rather than in a file.\nIn python-exiv2 the ``data`` and ``size`` parameters are replaced with a single `bytes-like object`_ such as bytes_ or bytearray_.\nThe buffered data isn't actually read until ``Image::readMetadata`` is called, so python-exiv2 stores a reference to the buffer to stop the user accidentally deleting it.\n\nWhen ``Image::writeMetadata`` is called exiv2 allocates a new block of memory to store the modified data.\nThe ``Image::io`` method returns an `Exiv2::BasicIo`_ object that provides access to this data.\n\nThe ``BasicIo::mmap`` method allows access to the image file data without unnecessary copying.\nHowever it is rather error prone, crashing your Python program with a segmentation fault if anything goes wrong.\n\nThe ``Exiv2::BasicIo`` object must be opened before calling ``mmap()``.\nA Python `context manager`_ can be used to ensure that the ``open()`` and ``mmap()`` calls are paired with ``munmap()`` and ``close()`` calls:\n\n.. code:: python\n\n    from contextlib import contextmanager\n\n    @contextmanager\n    def get_file_data(image):\n        exiv_io = image.io()\n        exiv_io.open()\n        try:\n            yield exiv_io.mmap()\n        finally:\n            exiv_io.munmap()\n            exiv_io.close()\n\n    # after setting some metadata\n    image.writeMetadata()\n    with get_file_data(image) as data:\n        rsp = requests.post(url, files={'file': io.BytesIO(data)})\n\nThe ``exiv2.BasicIo`` Python type exposes a `buffer interface`_ which is a lot easier to use.\nIt allows the ``exiv2.BasicIo`` object to be used anywhere that a `bytes-like object`_ is expected:\n\n.. code:: python\n\n    # after setting some metadata\n    image.writeMetadata()\n    exiv_io = image.io()\n    rsp = requests.post(url, files={'file': io.BytesIO(exiv_io)})\n\nSince python-exiv2 v0.15.0 this buffer can be writeable:\n\n.. code:: python\n\n    exiv_io = image.io()\n    with memoryview(exiv_io) as data:\n        data[23] = 157      # modifies data buffer\n    image.readMetadata()    # reads modified buffer data\n\nThe modified data is written back to the file or memory buffer when the memoryview_ is released.\n\n.. _bytearray:\n    https://docs.python.org/3/library/stdtypes.html#bytearray\n.. _bytes:\n    https://docs.python.org/3/library/stdtypes.html#bytes\n.. _bytes-like object:\n    https://docs.python.org/3/glossary.html#term-bytes-like-object\n.. _buffer interface:\n    https://docs.python.org/3/c-api/buffer.html\n.. _context manager:\n    https://docs.python.org/3/reference/datamodel.html#context-managers\n.. _dict:\n    https://docs.python.org/3/library/stdtypes.html#dict\n.. _enum:\n    https://docs.python.org/3/library/enum.html\n.. _Exiv2::BasicIo:\n    https://exiv2.org/doc/classExiv2_1_1BasicIo.html\n.. _Exiv2::BasicIo::mmap:\n    https://exiv2.org/doc/classExiv2_1_1BasicIo.html\n.. _Exiv2::DataBuf::data:\n    https://exiv2.org/doc/structExiv2_1_1DataBuf.html\n.. _Exiv2::ExifTags:\n    https://exiv2.org/doc/classExiv2_1_1ExifTags.html\n.. _Exiv2::ExifThumb::setJpegThumbnail:\n    https://exiv2.org/doc/classExiv2_1_1ExifThumb.html\n.. _Exiv2::Image:\n    https://exiv2.org/doc/classExiv2_1_1Image.html\n.. _Exiv2::ImageFactory:\n    https://exiv2.org/doc/classExiv2_1_1ImageFactory.html\n.. _Exiv2::Metadatum:\n    https://exiv2.org/doc/classExiv2_1_1Metadatum.html\n.. _Exiv2::TagInfo:\n    https://exiv2.org/doc/structExiv2_1_1TagInfo.html\n.. _Exiv2::TypeId:\n    https://exiv2.org/doc/namespaceExiv2.html#a5153319711f35fe81cbc13f4b852450c\n.. _Exiv2::Value:\n    https://exiv2.org/doc/classExiv2_1_1Value.html\n.. _Exiv2::ValueType&lt; T &gt;:\n    https://exiv2.org/doc/classExiv2_1_1ValueType.html\n.. _Fraction:\n    https://docs.python.org/3/library/fractions.html\n.. _libexiv2:\n    https://www.exiv2.org/doc/index.html\n.. _list:\n    https://docs.python.org/3/library/stdtypes.html#list\n.. _memoryview:\n    https://docs.python.org/3/library/stdtypes.html#memoryview\n.. _PyPI:\n    https://pypi.org/project/exiv2/\n</code></pre>"},{"location":"other/epub/","title":"ISCC - EPUB Processing","text":"<p>EPUB handling module.</p>"},{"location":"other/epub/#iscc_sdk.epub.epub_thumbnail","title":"<code>epub_thumbnail(fp)</code>","text":"<p>Creat thumbnail from EPUB document cover image.</p> <p>Parameters:</p> Name Type Description Default <code>fp</code> <p>Filepath to EPUB document.</p> required <p>Returns:</p> Type Description <p>Thumbnail image as PIL Image object</p>"},{"location":"other/epub/#iscc_sdk.epub.epub_meta_embed","title":"<code>epub_meta_embed(fp, meta)</code>","text":"<p>Embed metadata into a copy of the EPUB file.</p> <p>Parameters:</p> Name Type Description Default <code>fp</code> <p>Filepath to source EPUB file</p> required <code>meta</code> <code>IsccMeta</code> <p>Metadata to embed into EPUB</p> required <p>Returns:</p> Type Description <p>Filepath to the new EPUB file with updated metadata</p>"},{"location":"other/epub/#iscc_sdk.epub.epub_cover","title":"<code>epub_cover(fp)</code>","text":"<p>Extract the cover image bytes from an EPUB file.</p> <p>This function attempts to locate the cover image by first checking the metadata cover reference, then falling back to scanning for image files with 'cover' in the name and if that fails it returns the first image file from the manifest. The function also logs the relative path to the image within the epub which was identified as cover image. If no image is found, it raises an error.</p> <p>Parameters:</p> Name Type Description Default <code>fp</code> <p>Filepath to EPUB file</p> required <p>Returns:</p> Type Description <p>Raw bytes of the cover image</p> <p>Raises:</p> Type Description <code>IsccExtractionError</code> <p>If no cover image can be found.</p>"},{"location":"other/ipfs/","title":"ISCC - IPFS Tools","text":"<p>IPFS wrapper</p>"},{"location":"other/ipfs/#iscc_sdk.ipfs.ipfs_cidv1","title":"<code>ipfs_cidv1(fp, wrap=False)</code>","text":"<p>Create default IPFS CIDv1 for file at filepath <code>fp</code>.</p> <p>If <code>wrap</code> is True, the file will be wrapped with a directory and the filname will be appended to the directory CIDv1 with a <code>/</code>.</p> <p>Parameters:</p> Name Type Description Default <code>fp</code> <p>Filepath</p> required <p>Returns:</p> Type Description <p>IPFS CIDv1 of the file</p>"},{"location":"other/ipfs/#iscc_sdk.ipfs.ipfs_cidv1_base16","title":"<code>ipfs_cidv1_base16(fp)</code>","text":"<p>Create IPFS CIDv1 with base16 encoding.</p> <p>Parameters:</p> Name Type Description Default <code>fp</code> <p>Filepath</p> required <p>Returns:</p> Type Description <p>IPFS CIDv1 of the file in base16 (hex)</p>"},{"location":"other/pdf/","title":"ISCC - PDF Processing","text":"<p>PDF handling module.</p>"},{"location":"other/pdf/#iscc_sdk.pdf.pdf_text_extract","title":"<code>pdf_text_extract(fp)</code>","text":"<p>Extract PDF text with pypdfium2 + reading order recunstruction and hyphen removal</p>"},{"location":"other/pdf/#iscc_sdk.pdf.pdf_thumbnail","title":"<code>pdf_thumbnail(fp)</code>","text":"<p>Create a thumbnail from PDF document.</p> <p>Parameters:</p> Name Type Description Default <code>fp</code> <p>Filepath to PDF document.</p> required <p>Returns:</p> Type Description <p>Thumbnail image as PIL Image object</p>"},{"location":"other/pdf/#iscc_sdk.pdf.pdf_meta_embed","title":"<code>pdf_meta_embed(fp, meta)</code>","text":"<p>Embed metadata into a copy of the PDF file.</p> <p>Parameters:</p> Name Type Description Default <code>fp</code> <p>Filepath to source PDF file</p> required <code>meta</code> <p>Metadata to embed into PDF</p> required <p>Returns:</p> Type Description <p>Filepath to the new PDF file with updated metadata</p>"},{"location":"other/tools/","title":"ISCC - Tools","text":"<p>Manage SDK binary media file handling tools.</p>"},{"location":"other/tools/#iscc_sdk.tools.install","title":"<code>install()</code>","text":"<p>Install binary tools for content extraction and metadata handling.</p>"},{"location":"other/tools/#iscc_sdk.tools.run_ffmpeg","title":"<code>run_ffmpeg(args: List[str])</code>","text":"<p>Run ffmpeg command with <code>args</code>. Install ffmpeg if not found.</p>"},{"location":"other/tools/#iscc_sdk.tools.run_fpcalc","title":"<code>run_fpcalc(args: List[str])</code>","text":"<p>Run fpcalc command with <code>args</code>. Installs fpcalc if not found.</p>"},{"location":"other/tools/#iscc_sdk.tools.run_ipfs","title":"<code>run_ipfs(args: List[str])</code>","text":"<p>Run ipfs command with <code>args</code>. Install ipfs if not found.</p>"}]}